{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Compose Richtext is a collection of Compose libraries for working with rich text formatting and documents. Each library is documented separately, see the navigation menu for the list. This site also includes an API reference. Warning This project is currently very experimental and mostly just a proof-of-concept at this point. There are no tests and some things might be broken or very non-performant. The API may also change between releases without deprecation cycles. Getting started \u00b6 These libraries are published to Maven Central, so just add a Gradle dependency: dependencies { implementation \"com.zachklipp.compose-richtext:<LIBRARY-ARTIFACT>:${richtext_version}\" } The LIBRARY_ARTIFACT s for each individual library can be found on their respective pages.","title":"Overview"},{"location":"#overview","text":"Compose Richtext is a collection of Compose libraries for working with rich text formatting and documents. Each library is documented separately, see the navigation menu for the list. This site also includes an API reference. Warning This project is currently very experimental and mostly just a proof-of-concept at this point. There are no tests and some things might be broken or very non-performant. The API may also change between releases without deprecation cycles.","title":"Overview"},{"location":"#getting-started","text":"These libraries are published to Maven Central, so just add a Gradle dependency: dependencies { implementation \"com.zachklipp.compose-richtext:<LIBRARY-ARTIFACT>:${richtext_version}\" } The LIBRARY_ARTIFACT s for each individual library can be found on their respective pages.","title":"Getting started"},{"location":"printing/","text":"Printing \u00b6 A library for using Compose to generated printed documents, using Android's printing services. Gradle \u00b6 dependencies { implementation \"com.zachklipp.compose-richtext:printing:${richtext_version}\" } Usage \u00b6 There are multiple entry points into this library. See their kdoc for usage and parameter documentation, and take a look at the samples for example code. Printable \u00b6 This is the simplest entry point. It's a composable function that displays its children on screen, but can also print itself. Printing is triggered by the PrintableController passed to Printable . PrintableController is a hoisted state type, just like ScrollState , created by calling rememberPrintableController . val printController = rememberPrintableController () Printable ( printController ) { ScrollableColumn { Card { \u2026 } Card { \u2026 } Button ( onClick = { printController . print ( \"sales report\" ) }) { \u2026 } } } ComposePrintAdapter \u00b6 This is a PrintDocumentAdapter that can be used directly with Android's printing APIs to print any composable function. It takes, at minimum, the ComponentActivity that owns the print adapter (as required by Android's printing framework), a string name for the document, and the composable function that defines the content to print. See the linked API documentation for more details. Paged \u00b6 This is another composable, but doesn't actually have anything to do with printing. Conceptually it's similar to a ScrollableColumn \u2013 it lays its contents out at full height, then can display them at various vertical offsets. However, it also tries to ensure that no composables are clipped at the bottom, by measuring where all the leaf composables (those without any children) are located clipping the content before them. It is used by the printing APIs to try to ensure that composable content looks decent when split into printer pages. See the PagedSample for more information. Demo \u00b6 The DocumentSample tries to match the style of one of the Google Docs templates. It looks great on small phone screens, but also prints:","title":"Printing"},{"location":"printing/#printing","text":"A library for using Compose to generated printed documents, using Android's printing services.","title":"Printing"},{"location":"printing/#gradle","text":"dependencies { implementation \"com.zachklipp.compose-richtext:printing:${richtext_version}\" }","title":"Gradle"},{"location":"printing/#usage","text":"There are multiple entry points into this library. See their kdoc for usage and parameter documentation, and take a look at the samples for example code.","title":"Usage"},{"location":"printing/#printable","text":"This is the simplest entry point. It's a composable function that displays its children on screen, but can also print itself. Printing is triggered by the PrintableController passed to Printable . PrintableController is a hoisted state type, just like ScrollState , created by calling rememberPrintableController . val printController = rememberPrintableController () Printable ( printController ) { ScrollableColumn { Card { \u2026 } Card { \u2026 } Button ( onClick = { printController . print ( \"sales report\" ) }) { \u2026 } } }","title":"Printable"},{"location":"printing/#composeprintadapter","text":"This is a PrintDocumentAdapter that can be used directly with Android's printing APIs to print any composable function. It takes, at minimum, the ComponentActivity that owns the print adapter (as required by Android's printing framework), a string name for the document, and the composable function that defines the content to print. See the linked API documentation for more details.","title":"ComposePrintAdapter"},{"location":"printing/#paged","text":"This is another composable, but doesn't actually have anything to do with printing. Conceptually it's similar to a ScrollableColumn \u2013 it lays its contents out at full height, then can display them at various vertical offsets. However, it also tries to ensure that no composables are clipped at the bottom, by measuring where all the leaf composables (those without any children) are located clipping the content before them. It is used by the printing APIs to try to ensure that composable content looks decent when split into printer pages. See the PagedSample for more information.","title":"Paged"},{"location":"printing/#demo","text":"The DocumentSample tries to match the style of one of the Google Docs templates. It looks great on small phone screens, but also prints:","title":"Demo"},{"location":"richtext-commonmark/","text":"Markdown \u00b6 Library for rendering Markdown in Compose using Atlassian's CommonMark library to parse, and richtext-ui to render. Gradle \u00b6 dependencies { implementation \"com.zachklipp.compose-richtext:richtext-commonmark:${richtext_version}\" } Usage \u00b6 The simplest way to render markdown is just pass a string to the Markdown composable: Markdown ( \"\"\" # Demo Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. [Links with two blocks, text in square-brackets, destination is in parentheses.](https://www.example.com). Inline `code` has `back-ticks around` it. 1. First ordered list item 2. Another item * Unordered sub-list. 3. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). * Unordered list can use asterisks - Or minuses + Or pluses --- ```javascript var s = \"code blocks use monospace font\"; alert(s); ``` Markdown | Table | Extension --- | --- | --- *renders* | `beautiful images` | ![random image](https://picsum.photos/seed/picsum/400/400 \"Text 1\") 1 | 2 | 3 > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. \"\"\" . trimIndent (), Modifier . padding ( 16. dp ) ) Which produces something like this: The Markdown composable also takes an optional RichTextStyle which can be used to customize how it's rendered.","title":"Markdown"},{"location":"richtext-commonmark/#markdown","text":"Library for rendering Markdown in Compose using Atlassian's CommonMark library to parse, and richtext-ui to render.","title":"Markdown"},{"location":"richtext-commonmark/#gradle","text":"dependencies { implementation \"com.zachklipp.compose-richtext:richtext-commonmark:${richtext_version}\" }","title":"Gradle"},{"location":"richtext-commonmark/#usage","text":"The simplest way to render markdown is just pass a string to the Markdown composable: Markdown ( \"\"\" # Demo Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. [Links with two blocks, text in square-brackets, destination is in parentheses.](https://www.example.com). Inline `code` has `back-ticks around` it. 1. First ordered list item 2. Another item * Unordered sub-list. 3. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). * Unordered list can use asterisks - Or minuses + Or pluses --- ```javascript var s = \"code blocks use monospace font\"; alert(s); ``` Markdown | Table | Extension --- | --- | --- *renders* | `beautiful images` | ![random image](https://picsum.photos/seed/picsum/400/400 \"Text 1\") 1 | 2 | 3 > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. \"\"\" . trimIndent (), Modifier . padding ( 16. dp ) ) Which produces something like this: The Markdown composable also takes an optional RichTextStyle which can be used to customize how it's rendered.","title":"Usage"},{"location":"richtext-ui/","text":"Richtext UI \u00b6 A library of composables for formatting text using higher-level concepts than are supported by compose foundation, such as \"bullet lists\" and \"headings\". Gradle \u00b6 dependencies { implementation \"com.zachklipp.compose-richtext:richtext-ui:${richtext_version}\" } Example \u00b6 Open the Demo.kt file in the richtext-ui module to play with this. RichText ( modifier = Modifier . background ( color = Color . White )) { Heading ( 0 , \"Paragraphs\" ) Text ( \"Simple paragraph.\" ) Text ( \"Paragraph with\\nmultiple lines.\" ) Text ( \"Paragraph with really long line that should be getting wrapped.\" ) Heading ( 0 , \"Lists\" ) Heading ( 1 , \"Unordered\" ) ListDemo ( listType = Unordered ) Heading ( 1 , \"Ordered\" ) ListDemo ( listType = Ordered ) Heading ( 0 , \"Horizontal Line\" ) Text ( \"Above line\" ) HorizontalRule () Text ( \"Below line\" ) Heading ( 0 , \"Code Block\" ) CodeBlock ( \"\"\" { \"Hello\": \"world!\" } \"\"\" . trimIndent () ) Heading ( 0 , \"Block Quote\" ) BlockQuote { Text ( \"These paragraphs are quoted.\" ) Text ( \"More text.\" ) BlockQuote { Text ( \"Nested block quote.\" ) } } Heading ( 0 , \"Table\" ) Table ( headerRow = { cell { Text ( \"Column 1\" ) } cell { Text ( \"Column 2\" ) } }) { row { cell { Text ( \"Hello\" ) } cell { CodeBlock ( \"Foo bar\" ) } } row { cell { BlockQuote { Text ( \"Stuff\" ) } } cell { Text ( \"Hello world this is a really long line that is going to wrap hopefully\" ) } } } } Looks like this:","title":"Richtext UI"},{"location":"richtext-ui/#richtext-ui","text":"A library of composables for formatting text using higher-level concepts than are supported by compose foundation, such as \"bullet lists\" and \"headings\".","title":"Richtext UI"},{"location":"richtext-ui/#gradle","text":"dependencies { implementation \"com.zachklipp.compose-richtext:richtext-ui:${richtext_version}\" }","title":"Gradle"},{"location":"richtext-ui/#example","text":"Open the Demo.kt file in the richtext-ui module to play with this. RichText ( modifier = Modifier . background ( color = Color . White )) { Heading ( 0 , \"Paragraphs\" ) Text ( \"Simple paragraph.\" ) Text ( \"Paragraph with\\nmultiple lines.\" ) Text ( \"Paragraph with really long line that should be getting wrapped.\" ) Heading ( 0 , \"Lists\" ) Heading ( 1 , \"Unordered\" ) ListDemo ( listType = Unordered ) Heading ( 1 , \"Ordered\" ) ListDemo ( listType = Ordered ) Heading ( 0 , \"Horizontal Line\" ) Text ( \"Above line\" ) HorizontalRule () Text ( \"Below line\" ) Heading ( 0 , \"Code Block\" ) CodeBlock ( \"\"\" { \"Hello\": \"world!\" } \"\"\" . trimIndent () ) Heading ( 0 , \"Block Quote\" ) BlockQuote { Text ( \"These paragraphs are quoted.\" ) Text ( \"More text.\" ) BlockQuote { Text ( \"Nested block quote.\" ) } } Heading ( 0 , \"Table\" ) Table ( headerRow = { cell { Text ( \"Column 1\" ) } cell { Text ( \"Column 2\" ) } }) { row { cell { Text ( \"Hello\" ) } cell { CodeBlock ( \"Foo bar\" ) } } row { cell { BlockQuote { Text ( \"Stuff\" ) } } cell { Text ( \"Hello world this is a really long line that is going to wrap hopefully\" ) } } } } Looks like this:","title":"Example"},{"location":"slideshow/","text":"Slideshow \u00b6 A library for presenting simple Powerpoint-like slideshows from a phone (e.g. you can share your phone screen to a Google Hangout and present that way). Slides can contain any composable content, although a few pre-fab scaffolds are provided for common slide layouts. Gradle \u00b6 dependencies { implementation \"com.zachklipp.compose-richtext:slideshow:${richtext_version}\" } Setting up a slideshow \u00b6 There is a single, simple entry point to this library, that takes a vararg of composable functions that define your slides: Slideshow ( { /* First slide. */ }, { /* Second slide. */ }, { /* etc\u2026 */ }, ) The Slideshow composable will automatically lock your phone to portrait and enter immersive fullscreen while it's composed. You can tap anywhere on the left or right of the screen to navigate. Currently the only supported slide transition is crossfade, but it shouldn't be hard to make the library more pluggable and support more advanced transition libraries (like this one ). Creating slides \u00b6 Individual slides are centered by default, but you can put whatever you want in them. The library has a few scaffolds for common slide layouts that you might find useful. TitleSlide \u00b6 Very simple: a title and a subtitle, centered. Slideshow ( { TitleSlide ( title = { Text ( \"Title\" ) }, subtitle = { Text ( \"Subtitle\" ) }, ) }, ) BodySlide \u00b6 The BodySlide composable gives you a top header, bottom footer, and middle body slot to put stuff into. Slideshow ( { \u2026 }, { BodySlide ( header = { Text ( \"Header\" ) }, footer = { Text ( \"Footer\" ) }, body = { WebComponent ( \u2026 ) // or something }, ) }, ) Slide scaffolds like BodySlide and TitleSlide , as well as some other aspects of slideshow formatting like background color, are controlled by passing a SlideshowTheme to the Slideshow composable. Animating content on a single slide \u00b6 A corporate presentation wouldn't be a presentation without obtuse visual effects. The NavigableContentContainer composable is a flexible primitive for building such effects. It takes a slot inside of which NavigableContent composables define blocks of content that will be shown or hidden by slide navigation. Each NavigableContent block gets a State<Boolean> indicating whether content should be shown or not, and is free to show or hide content however it likes. For example, Compose comes with the AnimatedVisibility composable out of the box, which plays very nicely with this API. See the SlideshowSample to see it in action. NavigableContentContainer { Column { // Show this right away. Text ( \"First paragraph\" ) // Only show this after tapping to advance the show, then fade it in. NavigableContent { visible -> val opacity = animate ( if ( visible ) 1f else 0f ) Text ( \"Second paragraph\" , Modifier . drawOpacity ( opacity )) } } } Running the show \u00b6 If you're in the middle of a presentation and lose your place, just drag up anywhere on the screen. A slider and preview will pop up to let you scrub through the deck.","title":"Slideshow"},{"location":"slideshow/#slideshow","text":"A library for presenting simple Powerpoint-like slideshows from a phone (e.g. you can share your phone screen to a Google Hangout and present that way). Slides can contain any composable content, although a few pre-fab scaffolds are provided for common slide layouts.","title":"Slideshow"},{"location":"slideshow/#gradle","text":"dependencies { implementation \"com.zachklipp.compose-richtext:slideshow:${richtext_version}\" }","title":"Gradle"},{"location":"slideshow/#setting-up-a-slideshow","text":"There is a single, simple entry point to this library, that takes a vararg of composable functions that define your slides: Slideshow ( { /* First slide. */ }, { /* Second slide. */ }, { /* etc\u2026 */ }, ) The Slideshow composable will automatically lock your phone to portrait and enter immersive fullscreen while it's composed. You can tap anywhere on the left or right of the screen to navigate. Currently the only supported slide transition is crossfade, but it shouldn't be hard to make the library more pluggable and support more advanced transition libraries (like this one ).","title":"Setting up a slideshow"},{"location":"slideshow/#creating-slides","text":"Individual slides are centered by default, but you can put whatever you want in them. The library has a few scaffolds for common slide layouts that you might find useful.","title":"Creating slides"},{"location":"slideshow/#titleslide","text":"Very simple: a title and a subtitle, centered. Slideshow ( { TitleSlide ( title = { Text ( \"Title\" ) }, subtitle = { Text ( \"Subtitle\" ) }, ) }, )","title":"TitleSlide"},{"location":"slideshow/#bodyslide","text":"The BodySlide composable gives you a top header, bottom footer, and middle body slot to put stuff into. Slideshow ( { \u2026 }, { BodySlide ( header = { Text ( \"Header\" ) }, footer = { Text ( \"Footer\" ) }, body = { WebComponent ( \u2026 ) // or something }, ) }, ) Slide scaffolds like BodySlide and TitleSlide , as well as some other aspects of slideshow formatting like background color, are controlled by passing a SlideshowTheme to the Slideshow composable.","title":"BodySlide"},{"location":"slideshow/#animating-content-on-a-single-slide","text":"A corporate presentation wouldn't be a presentation without obtuse visual effects. The NavigableContentContainer composable is a flexible primitive for building such effects. It takes a slot inside of which NavigableContent composables define blocks of content that will be shown or hidden by slide navigation. Each NavigableContent block gets a State<Boolean> indicating whether content should be shown or not, and is free to show or hide content however it likes. For example, Compose comes with the AnimatedVisibility composable out of the box, which plays very nicely with this API. See the SlideshowSample to see it in action. NavigableContentContainer { Column { // Show this right away. Text ( \"First paragraph\" ) // Only show this after tapping to advance the show, then fade it in. NavigableContent { visible -> val opacity = animate ( if ( visible ) 1f else 0f ) Text ( \"Second paragraph\" , Modifier . drawOpacity ( opacity )) } } }","title":"Animating content on a single slide"},{"location":"slideshow/#running-the-show","text":"If you're in the middle of a presentation and lose your place, just drag up anywhere on the screen. A slider and preview will pop up to let you scrub through the deck.","title":"Running the show"},{"location":"api/","text":"// compose-richtext compose-richtext \u00b6 Packages \u00b6 Name Summary com.zachklipp.richtext.markdown com.zachklipp.richtext.ui com.zachklipp.richtext.ui.printing com.zachklipp.richtext.ui.slideshow com.zachklipp.richtext.ui.string","title":"API Reference"},{"location":"api/#compose-richtext","text":"","title":"compose-richtext"},{"location":"api/#packages","text":"Name Summary com.zachklipp.richtext.markdown com.zachklipp.richtext.ui com.zachklipp.richtext.ui.printing com.zachklipp.richtext.ui.slideshow com.zachklipp.richtext.ui.string","title":"Packages"},{"location":"api/com.zachklipp.richtext.markdown/","text":"// compose-richtext / com.zachklipp.richtext.markdown Package com.zachklipp.richtext.markdown \u00b6 Functions \u00b6 Name Summary Markdown [androidJvm] Content @Composable() fun Markdown (content: String , modifier: Modifier = Modifier, style: RichTextStyle ? = null, onLinkClicked: ( String ) -> Unit ? = null) More info A composable that renders Markdown content using RichText .","title":"Index"},{"location":"api/com.zachklipp.richtext.markdown/#package-comzachklipprichtextmarkdown","text":"","title":"Package com.zachklipp.richtext.markdown"},{"location":"api/com.zachklipp.richtext.markdown/#functions","text":"Name Summary Markdown [androidJvm] Content @Composable() fun Markdown (content: String , modifier: Modifier = Modifier, style: RichTextStyle ? = null, onLinkClicked: ( String ) -> Unit ? = null) More info A composable that renders Markdown content using RichText .","title":"Functions"},{"location":"api/com.zachklipp.richtext.markdown/-markdown/","text":"// compose-richtext / com.zachklipp.richtext.markdown / Markdown Markdown \u00b6 [androidJvm] Content @Composable() fun Markdown (content: String , modifier: Modifier = Modifier, style: RichTextStyle ? = null, onLinkClicked: ( String ) -> Unit ? = null) More info A composable that renders Markdown content using RichText . Parameters \u00b6 androidJvm Name Summary content Markdown text. No restriction on length. style RichTextStyle that will be used to style markdown rendering. onLinkClicked A function to invoke when a link is clicked from rendered content.","title":" markdown"},{"location":"api/com.zachklipp.richtext.markdown/-markdown/#markdown","text":"[androidJvm] Content @Composable() fun Markdown (content: String , modifier: Modifier = Modifier, style: RichTextStyle ? = null, onLinkClicked: ( String ) -> Unit ? = null) More info A composable that renders Markdown content using RichText .","title":"Markdown"},{"location":"api/com.zachklipp.richtext.markdown/-markdown/#parameters","text":"androidJvm Name Summary content Markdown text. No restriction on length. style RichTextStyle that will be used to style markdown rendering. onLinkClicked A function to invoke when a link is clicked from rendered content.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/","text":"// compose-richtext / com.zachklipp.richtext.ui Package com.zachklipp.richtext.ui \u00b6 Types \u00b6 Name Summary BlockQuoteGutter [androidJvm] Content interface BlockQuoteGutter More info A composable function that draws the gutter beside a BlockQuote . CodeBlockStyle [androidJvm] Content @Immutable() data class CodeBlockStyle ( textStyle : TextStyle?, background : Color?, padding : TextUnit?) More info Defines how CodeBlock s are rendered. HeadingStyle [androidJvm] Content typealias HeadingStyle = (level: Int , textStyle: TextStyle) -> TextStyle More info Function that computes the TextStyle for the given header level, given the current TextStyle for this point in the composition. Note that the TextStyle passed into this function will be fully resolved. The returned style will then be merged with the passed-in text style, so any unspecified properties will be inherited. ListStyle [androidJvm] Content @Immutable() data class ListStyle ( markerIndent : TextUnit?, contentsIndent : TextUnit?, orderedMarkers : OrderedMarkers ?, unorderedMarkers : UnorderedMarkers ?) More info Defines how FormattedList s should look. ListType [androidJvm] Content enum ListType : Enum < ListType > OrderedMarkers [androidJvm] Content interface OrderedMarkers More info Defines how to draw list markers for FormattedList s that are Ordered . RichTextScope [androidJvm] Content @Immutable() object RichTextScope More info Scope object for composables that can draw rich text. RichTextStyle [androidJvm] Content @Immutable() data class RichTextStyle ( paragraphSpacing : TextUnit?, headingStyle : HeadingStyle ?, listStyle : ListStyle ?, blockQuoteGutter : BlockQuoteGutter ?, codeBlockStyle : CodeBlockStyle ?, tableStyle : TableStyle ?, stringStyle : RichTextStringStyle ?) More info Configures all formatting attributes for drawing rich text. RichTextTableCellScope [androidJvm] Content interface RichTextTableCellScope RichTextTableRowScope [androidJvm] Content interface RichTextTableRowScope TableStyle [androidJvm] Content @Immutable() data class TableStyle ( headerTextStyle : TextStyle?, cellPadding : TextUnit?, borderColor : Color?, borderStrokeWidth : Float ?) More info Defines the visual style for a Table . UnorderedMarkers [androidJvm] Content interface UnorderedMarkers More info Defines how to draw list markers for FormattedList s that are Unordered . Functions \u00b6 Name Summary BlockQuote [androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side. CodeBlock [androidJvm] Content @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) @Composable() fun RichTextScope . CodeBlock (text: String ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background. FormattedList [androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list. Heading [androidJvm] Content @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) More info A section heading. HorizontalRule [androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color. merge [androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle resolveDefaults [androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle RichText [androidJvm] Content @Composable() fun RichText (modifier: Modifier = Modifier, style: RichTextStyle ? = null, children: RichTextScope .() -> Unit ) More info Draws some rich text. Table [androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. WithStyle [androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children. Properties \u00b6 Name Summary currentRichTextStyle [androidJvm] val RichTextScope . currentRichTextStyle : RichTextStyle The current RichTextStyle .","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/#package-comzachklipprichtextui","text":"","title":"Package com.zachklipp.richtext.ui"},{"location":"api/com.zachklipp.richtext.ui/#types","text":"Name Summary BlockQuoteGutter [androidJvm] Content interface BlockQuoteGutter More info A composable function that draws the gutter beside a BlockQuote . CodeBlockStyle [androidJvm] Content @Immutable() data class CodeBlockStyle ( textStyle : TextStyle?, background : Color?, padding : TextUnit?) More info Defines how CodeBlock s are rendered. HeadingStyle [androidJvm] Content typealias HeadingStyle = (level: Int , textStyle: TextStyle) -> TextStyle More info Function that computes the TextStyle for the given header level, given the current TextStyle for this point in the composition. Note that the TextStyle passed into this function will be fully resolved. The returned style will then be merged with the passed-in text style, so any unspecified properties will be inherited. ListStyle [androidJvm] Content @Immutable() data class ListStyle ( markerIndent : TextUnit?, contentsIndent : TextUnit?, orderedMarkers : OrderedMarkers ?, unorderedMarkers : UnorderedMarkers ?) More info Defines how FormattedList s should look. ListType [androidJvm] Content enum ListType : Enum < ListType > OrderedMarkers [androidJvm] Content interface OrderedMarkers More info Defines how to draw list markers for FormattedList s that are Ordered . RichTextScope [androidJvm] Content @Immutable() object RichTextScope More info Scope object for composables that can draw rich text. RichTextStyle [androidJvm] Content @Immutable() data class RichTextStyle ( paragraphSpacing : TextUnit?, headingStyle : HeadingStyle ?, listStyle : ListStyle ?, blockQuoteGutter : BlockQuoteGutter ?, codeBlockStyle : CodeBlockStyle ?, tableStyle : TableStyle ?, stringStyle : RichTextStringStyle ?) More info Configures all formatting attributes for drawing rich text. RichTextTableCellScope [androidJvm] Content interface RichTextTableCellScope RichTextTableRowScope [androidJvm] Content interface RichTextTableRowScope TableStyle [androidJvm] Content @Immutable() data class TableStyle ( headerTextStyle : TextStyle?, cellPadding : TextUnit?, borderColor : Color?, borderStrokeWidth : Float ?) More info Defines the visual style for a Table . UnorderedMarkers [androidJvm] Content interface UnorderedMarkers More info Defines how to draw list markers for FormattedList s that are Unordered .","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/#functions","text":"Name Summary BlockQuote [androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side. CodeBlock [androidJvm] Content @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) @Composable() fun RichTextScope . CodeBlock (text: String ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background. FormattedList [androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list. Heading [androidJvm] Content @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) More info A section heading. HorizontalRule [androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color. merge [androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle resolveDefaults [androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle RichText [androidJvm] Content @Composable() fun RichText (modifier: Modifier = Modifier, style: RichTextStyle ? = null, children: RichTextScope .() -> Unit ) More info Draws some rich text. Table [androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. WithStyle [androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children.","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/#properties","text":"Name Summary currentRichTextStyle [androidJvm] val RichTextScope . currentRichTextStyle : RichTextStyle The current RichTextStyle .","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-block-quote/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuote BlockQuote \u00b6 [androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side.","title":" block quote"},{"location":"api/com.zachklipp.richtext.ui/-block-quote/#blockquote","text":"[androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side.","title":"BlockQuote"},{"location":"api/com.zachklipp.richtext.ui/-code-block/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlock CodeBlock \u00b6 [androidJvm] Content @Composable() fun RichTextScope . CodeBlock (text: String ) @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background.","title":" code block"},{"location":"api/com.zachklipp.richtext.ui/-code-block/#codeblock","text":"[androidJvm] Content @Composable() fun RichTextScope . CodeBlock (text: String ) @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background.","title":"CodeBlock"},{"location":"api/com.zachklipp.richtext.ui/-formatted-list/","text":"// compose-richtext / com.zachklipp.richtext.ui / FormattedList FormattedList \u00b6 [androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list. Samples \u00b6 [androidJvm] com.zachklipp.richtext.ui.OrderedListPreviewcom.zachklipp.richtext.ui.UnorderedListPreview","title":" formatted list"},{"location":"api/com.zachklipp.richtext.ui/-formatted-list/#formattedlist","text":"[androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list.","title":"FormattedList"},{"location":"api/com.zachklipp.richtext.ui/-formatted-list/#samples","text":"[androidJvm] com.zachklipp.richtext.ui.OrderedListPreviewcom.zachklipp.richtext.ui.UnorderedListPreview","title":"Samples"},{"location":"api/com.zachklipp.richtext.ui/-heading/","text":"// compose-richtext / com.zachklipp.richtext.ui / Heading Heading \u00b6 [androidJvm] Content @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) More info A section heading. Parameters \u00b6 androidJvm Name Summary level The non-negative rank of the header, with 0 being the most important. [androidJvm] Content @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) More info A section heading. Parameters \u00b6 androidJvm Name Summary level The non-negative rank of the header, with 0 being the most important.","title":" heading"},{"location":"api/com.zachklipp.richtext.ui/-heading/#heading","text":"[androidJvm] Content @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) More info A section heading.","title":"Heading"},{"location":"api/com.zachklipp.richtext.ui/-heading/#parameters","text":"androidJvm Name Summary level The non-negative rank of the header, with 0 being the most important. [androidJvm] Content @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) More info A section heading.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-heading/#parameters_1","text":"androidJvm Name Summary level The non-negative rank of the header, with 0 being the most important.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-horizontal-rule/","text":"// compose-richtext / com.zachklipp.richtext.ui / HorizontalRule HorizontalRule \u00b6 [androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color.","title":" horizontal rule"},{"location":"api/com.zachklipp.richtext.ui/-horizontal-rule/#horizontalrule","text":"[androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color.","title":"HorizontalRule"},{"location":"api/com.zachklipp.richtext.ui/-rich-text/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichText RichText \u00b6 [androidJvm] Content @Composable() fun RichText (modifier: Modifier = Modifier, style: RichTextStyle ? = null, children: RichTextScope .() -> Unit ) More info Draws some rich text. Entry point to the compose-richtext library.","title":" rich text"},{"location":"api/com.zachklipp.richtext.ui/-rich-text/#richtext","text":"[androidJvm] Content @Composable() fun RichText (modifier: Modifier = Modifier, style: RichTextStyle ? = null, children: RichTextScope .() -> Unit ) More info Draws some rich text. Entry point to the compose-richtext library.","title":"RichText"},{"location":"api/com.zachklipp.richtext.ui/-table/","text":"// compose-richtext / com.zachklipp.richtext.ui / Table Table \u00b6 [androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. The style of the table is defined by the RichTextStyle.tableStyle TableStyle .","title":" table"},{"location":"api/com.zachklipp.richtext.ui/-table/#table","text":"[androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. The style of the table is defined by the RichTextStyle.tableStyle TableStyle .","title":"Table"},{"location":"api/com.zachklipp.richtext.ui/-with-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / WithStyle WithStyle \u00b6 [androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children.","title":" with style"},{"location":"api/com.zachklipp.richtext.ui/-with-style/#withstyle","text":"[androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children.","title":"WithStyle"},{"location":"api/com.zachklipp.richtext.ui/current-rich-text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / currentRichTextStyle currentRichTextStyle \u00b6 [androidJvm] Content val RichTextScope . currentRichTextStyle : RichTextStyle More info The current RichTextStyle .","title":"Current rich text style"},{"location":"api/com.zachklipp.richtext.ui/current-rich-text-style/#currentrichtextstyle","text":"[androidJvm] Content val RichTextScope . currentRichTextStyle : RichTextStyle More info The current RichTextStyle .","title":"currentRichTextStyle"},{"location":"api/com.zachklipp.richtext.ui/merge/","text":"// compose-richtext / com.zachklipp.richtext.ui / merge merge \u00b6 [androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle","title":"Merge"},{"location":"api/com.zachklipp.richtext.ui/merge/#merge","text":"[androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle","title":"merge"},{"location":"api/com.zachklipp.richtext.ui/resolve-defaults/","text":"// compose-richtext / com.zachklipp.richtext.ui / resolveDefaults resolveDefaults \u00b6 [androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle","title":"Resolve defaults"},{"location":"api/com.zachklipp.richtext.ui/resolve-defaults/#resolvedefaults","text":"[androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle","title":"resolveDefaults"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter BlockQuoteGutter \u00b6 [androidJvm] interface BlockQuoteGutter A composable function that draws the gutter beside a BlockQuote . BarGutter is provided as the reasonable default of a simple vertical line. Types \u00b6 Name Summary BarGutter [androidJvm] Content @Immutable() data class BarGutter ( startMargin : TextUnit, barWidth : TextUnit, endMargin : TextUnit, color : (contentColor: Color) -> Color) : BlockQuoteGutter Functions \u00b6 Name Summary drawGutter [androidJvm] Content @Composable() abstract fun drawGutter () equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Inheritors \u00b6 Name BlockQuoteGutter","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/#blockquotegutter","text":"[androidJvm] interface BlockQuoteGutter A composable function that draws the gutter beside a BlockQuote . BarGutter is provided as the reasonable default of a simple vertical line.","title":"BlockQuoteGutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/#types","text":"Name Summary BarGutter [androidJvm] Content @Immutable() data class BarGutter ( startMargin : TextUnit, barWidth : TextUnit, endMargin : TextUnit, color : (contentColor: Color) -> Color) : BlockQuoteGutter","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/#functions","text":"Name Summary drawGutter [androidJvm] Content @Composable() abstract fun drawGutter () equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/#inheritors","text":"Name BlockQuoteGutter","title":"Inheritors"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/draw-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / drawGutter drawGutter \u00b6 [androidJvm] Content @Composable() abstract fun drawGutter ()","title":"Draw gutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/draw-gutter/#drawgutter","text":"[androidJvm] Content @Composable() abstract fun drawGutter ()","title":"drawGutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter BarGutter \u00b6 [androidJvm] @Immutable() data class BarGutter ( startMargin : TextUnit, barWidth : TextUnit, endMargin : TextUnit, color : (contentColor: Color) -> Color) : BlockQuoteGutter Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit component2 [androidJvm] Content operator fun component2 (): TextUnit component3 [androidJvm] Content operator fun component3 (): TextUnit component4 [androidJvm] Content operator fun component4 (): (contentColor: Color) -> Color copy [androidJvm] Content fun copy (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) }): BlockQuoteGutter.BarGutter drawGutter [androidJvm] Content @Composable() open override fun drawGutter () equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary barWidth [androidJvm] val barWidth : TextUnit color [androidJvm] val color : (contentColor: Color) -> Color endMargin [androidJvm] val endMargin : TextUnit startMargin [androidJvm] val startMargin : TextUnit","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/#bargutter","text":"[androidJvm] @Immutable() data class BarGutter ( startMargin : TextUnit, barWidth : TextUnit, endMargin : TextUnit, color : (contentColor: Color) -> Color) : BlockQuoteGutter","title":"BarGutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit component2 [androidJvm] Content operator fun component2 (): TextUnit component3 [androidJvm] Content operator fun component3 (): TextUnit component4 [androidJvm] Content operator fun component4 (): (contentColor: Color) -> Color copy [androidJvm] Content fun copy (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) }): BlockQuoteGutter.BarGutter drawGutter [androidJvm] Content @Composable() open override fun drawGutter () equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/#properties","text":"Name Summary barWidth [androidJvm] val barWidth : TextUnit color [androidJvm] val color : (contentColor: Color) -> Color endMargin [androidJvm] val endMargin : TextUnit startMargin [androidJvm] val startMargin : TextUnit","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/-bar-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / BarGutter BarGutter \u00b6 [androidJvm] Content fun BarGutter (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) })","title":" bar gutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/-bar-gutter/#bargutter","text":"[androidJvm] Content fun BarGutter (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) })","title":"BarGutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/bar-width/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / barWidth barWidth \u00b6 [androidJvm] Content val barWidth : TextUnit","title":"Bar width"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/bar-width/#barwidth","text":"[androidJvm] Content val barWidth : TextUnit","title":"barWidth"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/color/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / color color \u00b6 [androidJvm] Content val color : (contentColor: Color) -> Color","title":"Color"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/color/#color","text":"[androidJvm] Content val color : (contentColor: Color) -> Color","title":"color"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): TextUnit","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component1/#component1","text":"[androidJvm] Content operator fun component1 (): TextUnit","title":"component1"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): TextUnit","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component2/#component2","text":"[androidJvm] Content operator fun component2 (): TextUnit","title":"component2"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): TextUnit","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component3/#component3","text":"[androidJvm] Content operator fun component3 (): TextUnit","title":"component3"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): (contentColor: Color) -> Color","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/component4/#component4","text":"[androidJvm] Content operator fun component4 (): (contentColor: Color) -> Color","title":"component4"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / copy copy \u00b6 [androidJvm] Content fun copy (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) }): BlockQuoteGutter.BarGutter","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/copy/#copy","text":"[androidJvm] Content fun copy (startMargin: TextUnit = 6.sp, barWidth: TextUnit = 3.sp, endMargin: TextUnit = 6.sp, color: (contentColor: Color) -> Color = { it.copy(alpha = .25f) }): BlockQuoteGutter.BarGutter","title":"copy"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/draw-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / drawGutter drawGutter \u00b6 [androidJvm] Content @Composable() open override fun drawGutter ()","title":"Draw gutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/draw-gutter/#drawgutter","text":"[androidJvm] Content @Composable() open override fun drawGutter ()","title":"drawGutter"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/end-margin/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / endMargin endMargin \u00b6 [androidJvm] Content val endMargin : TextUnit","title":"End margin"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/end-margin/#endmargin","text":"[androidJvm] Content val endMargin : TextUnit","title":"endMargin"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/start-margin/","text":"// compose-richtext / com.zachklipp.richtext.ui / BlockQuoteGutter / BarGutter / startMargin startMargin \u00b6 [androidJvm] Content val startMargin : TextUnit","title":"Start margin"},{"location":"api/com.zachklipp.richtext.ui/-block-quote-gutter/-bar-gutter/start-margin/#startmargin","text":"[androidJvm] Content val startMargin : TextUnit","title":"startMargin"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle CodeBlockStyle \u00b6 [androidJvm] @Immutable() data class CodeBlockStyle ( textStyle : TextStyle?, background : Color?, padding : TextUnit?) Defines how CodeBlock s are rendered. Parameters \u00b6 androidJvm Name Summary textStyle The TextStyle to use for the block. background The Color of a code block, drawn behind the text. padding The amount of space between the edge of the text and the edge of the background. Constructors \u00b6 Name Summary CodeBlockStyle [androidJvm] fun CodeBlockStyle (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null)The TextStyle to use for the block. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): TextStyle? component2 [androidJvm] Content operator fun component2 (): Color? component3 [androidJvm] Content operator fun component3 (): TextUnit? copy [androidJvm] Content fun copy (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null): CodeBlockStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary background [androidJvm] val background : Color? = nullThe Color of a code block, drawn behind the text. padding [androidJvm] val padding : TextUnit? = nullThe amount of space between the edge of the text and the edge of the background. textStyle [androidJvm] val textStyle : TextStyle? = nullThe TextStyle to use for the block.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#codeblockstyle","text":"[androidJvm] @Immutable() data class CodeBlockStyle ( textStyle : TextStyle?, background : Color?, padding : TextUnit?) Defines how CodeBlock s are rendered.","title":"CodeBlockStyle"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#parameters","text":"androidJvm Name Summary textStyle The TextStyle to use for the block. background The Color of a code block, drawn behind the text. padding The amount of space between the edge of the text and the edge of the background.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#constructors","text":"Name Summary CodeBlockStyle [androidJvm] fun CodeBlockStyle (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null)The TextStyle to use for the block.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): TextStyle? component2 [androidJvm] Content operator fun component2 (): Color? component3 [androidJvm] Content operator fun component3 (): TextUnit? copy [androidJvm] Content fun copy (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null): CodeBlockStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/#properties","text":"Name Summary background [androidJvm] val background : Color? = nullThe Color of a code block, drawn behind the text. padding [androidJvm] val padding : TextUnit? = nullThe amount of space between the edge of the text and the edge of the background. textStyle [androidJvm] val textStyle : TextStyle? = nullThe TextStyle to use for the block.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-code-block-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / CodeBlockStyle CodeBlockStyle \u00b6 [androidJvm] Content fun CodeBlockStyle (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null) More info Parameters \u00b6 androidJvm Name Summary textStyle The TextStyle to use for the block. background The Color of a code block, drawn behind the text. padding The amount of space between the edge of the text and the edge of the background.","title":" code block style"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-code-block-style/#codeblockstyle","text":"[androidJvm] Content fun CodeBlockStyle (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null) More info","title":"CodeBlockStyle"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-code-block-style/#parameters","text":"androidJvm Name Summary textStyle The TextStyle to use for the block. background The Color of a code block, drawn behind the text. padding The amount of space between the edge of the text and the edge of the background.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/background/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / background background \u00b6 [androidJvm] Content val background : Color? = null More info Parameters \u00b6 androidJvm Name Summary background The Color of a code block, drawn behind the text.","title":"Background"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/background/#background","text":"[androidJvm] Content val background : Color? = null More info","title":"background"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/background/#parameters","text":"androidJvm Name Summary background The Color of a code block, drawn behind the text.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): TextStyle?","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component1/#component1","text":"[androidJvm] Content operator fun component1 (): TextStyle?","title":"component1"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): Color?","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component2/#component2","text":"[androidJvm] Content operator fun component2 (): Color?","title":"component2"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): TextUnit?","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/component3/#component3","text":"[androidJvm] Content operator fun component3 (): TextUnit?","title":"component3"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / copy copy \u00b6 [androidJvm] Content fun copy (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null): CodeBlockStyle","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/copy/#copy","text":"[androidJvm] Content fun copy (textStyle: TextStyle? = null, background: Color? = null, padding: TextUnit? = null): CodeBlockStyle","title":"copy"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/padding/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / padding padding \u00b6 [androidJvm] Content val padding : TextUnit? = null More info Parameters \u00b6 androidJvm Name Summary padding The amount of space between the edge of the text and the edge of the background.","title":"Padding"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/padding/#padding","text":"[androidJvm] Content val padding : TextUnit? = null More info","title":"padding"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/padding/#parameters","text":"androidJvm Name Summary padding The amount of space between the edge of the text and the edge of the background.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / textStyle textStyle \u00b6 [androidJvm] Content val textStyle : TextStyle? = null More info Parameters \u00b6 androidJvm Name Summary textStyle The TextStyle to use for the block.","title":"Text style"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/text-style/#textstyle","text":"[androidJvm] Content val textStyle : TextStyle? = null More info","title":"textStyle"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/text-style/#parameters","text":"androidJvm Name Summary textStyle The TextStyle to use for the block.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary Default [androidJvm] val Default : CodeBlockStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/#properties","text":"Name Summary Default [androidJvm] val Default : CodeBlockStyle","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/-default/","text":"// compose-richtext / com.zachklipp.richtext.ui / CodeBlockStyle / Companion / Default Default \u00b6 [androidJvm] Content val Default : CodeBlockStyle","title":" default"},{"location":"api/com.zachklipp.richtext.ui/-code-block-style/-companion/-default/#default","text":"[androidJvm] Content val Default : CodeBlockStyle","title":"Default"},{"location":"api/com.zachklipp.richtext.ui/-list-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle ListStyle \u00b6 [androidJvm] @Immutable() data class ListStyle ( markerIndent : TextUnit?, contentsIndent : TextUnit?, orderedMarkers : OrderedMarkers ?, unorderedMarkers : UnorderedMarkers ?) Defines how FormattedList s should look. Parameters \u00b6 androidJvm Name Summary markerIndent The padding before each marker. contentsIndent The padding after each marker. Constructors \u00b6 Name Summary ListStyle [androidJvm] fun ListStyle (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null)The padding before each marker. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit? component2 [androidJvm] Content operator fun component2 (): TextUnit? component3 [androidJvm] Content operator fun component3 (): OrderedMarkers ? component4 [androidJvm] Content operator fun component4 (): UnorderedMarkers ? copy [androidJvm] Content fun copy (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null): ListStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary contentsIndent [androidJvm] val contentsIndent : TextUnit? = nullThe padding after each marker. markerIndent [androidJvm] val markerIndent : TextUnit? = nullThe padding before each marker. orderedMarkers [androidJvm] val orderedMarkers : OrderedMarkers ? = null unorderedMarkers [androidJvm] val unorderedMarkers : UnorderedMarkers ? = null","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#liststyle","text":"[androidJvm] @Immutable() data class ListStyle ( markerIndent : TextUnit?, contentsIndent : TextUnit?, orderedMarkers : OrderedMarkers ?, unorderedMarkers : UnorderedMarkers ?) Defines how FormattedList s should look.","title":"ListStyle"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#parameters","text":"androidJvm Name Summary markerIndent The padding before each marker. contentsIndent The padding after each marker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#constructors","text":"Name Summary ListStyle [androidJvm] fun ListStyle (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null)The padding before each marker.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit? component2 [androidJvm] Content operator fun component2 (): TextUnit? component3 [androidJvm] Content operator fun component3 (): OrderedMarkers ? component4 [androidJvm] Content operator fun component4 (): UnorderedMarkers ? copy [androidJvm] Content fun copy (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null): ListStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-list-style/#properties","text":"Name Summary contentsIndent [androidJvm] val contentsIndent : TextUnit? = nullThe padding after each marker. markerIndent [androidJvm] val markerIndent : TextUnit? = nullThe padding before each marker. orderedMarkers [androidJvm] val orderedMarkers : OrderedMarkers ? = null unorderedMarkers [androidJvm] val unorderedMarkers : UnorderedMarkers ? = null","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-list-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / ListStyle ListStyle \u00b6 [androidJvm] Content fun ListStyle (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null) More info Parameters \u00b6 androidJvm Name Summary markerIndent The padding before each marker. contentsIndent The padding after each marker.","title":" list style"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-list-style/#liststyle","text":"[androidJvm] Content fun ListStyle (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null) More info","title":"ListStyle"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-list-style/#parameters","text":"androidJvm Name Summary markerIndent The padding before each marker. contentsIndent The padding after each marker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): TextUnit?","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component1/#component1","text":"[androidJvm] Content operator fun component1 (): TextUnit?","title":"component1"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): TextUnit?","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component2/#component2","text":"[androidJvm] Content operator fun component2 (): TextUnit?","title":"component2"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): OrderedMarkers ?","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component3/#component3","text":"[androidJvm] Content operator fun component3 (): OrderedMarkers ?","title":"component3"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): UnorderedMarkers ?","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui/-list-style/component4/#component4","text":"[androidJvm] Content operator fun component4 (): UnorderedMarkers ?","title":"component4"},{"location":"api/com.zachklipp.richtext.ui/-list-style/contents-indent/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / contentsIndent contentsIndent \u00b6 [androidJvm] Content val contentsIndent : TextUnit? = null More info Parameters \u00b6 androidJvm Name Summary contentsIndent The padding after each marker.","title":"Contents indent"},{"location":"api/com.zachklipp.richtext.ui/-list-style/contents-indent/#contentsindent","text":"[androidJvm] Content val contentsIndent : TextUnit? = null More info","title":"contentsIndent"},{"location":"api/com.zachklipp.richtext.ui/-list-style/contents-indent/#parameters","text":"androidJvm Name Summary contentsIndent The padding after each marker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-list-style/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / copy copy \u00b6 [androidJvm] Content fun copy (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null): ListStyle","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui/-list-style/copy/#copy","text":"[androidJvm] Content fun copy (markerIndent: TextUnit? = null, contentsIndent: TextUnit? = null, orderedMarkers: OrderedMarkers ? = null, unorderedMarkers: UnorderedMarkers ? = null): ListStyle","title":"copy"},{"location":"api/com.zachklipp.richtext.ui/-list-style/marker-indent/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / markerIndent markerIndent \u00b6 [androidJvm] Content val markerIndent : TextUnit? = null More info Parameters \u00b6 androidJvm Name Summary markerIndent The padding before each marker.","title":"Marker indent"},{"location":"api/com.zachklipp.richtext.ui/-list-style/marker-indent/#markerindent","text":"[androidJvm] Content val markerIndent : TextUnit? = null More info","title":"markerIndent"},{"location":"api/com.zachklipp.richtext.ui/-list-style/marker-indent/#parameters","text":"androidJvm Name Summary markerIndent The padding before each marker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-list-style/ordered-markers/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / orderedMarkers orderedMarkers \u00b6 [androidJvm] Content val orderedMarkers : OrderedMarkers ? = null","title":"Ordered markers"},{"location":"api/com.zachklipp.richtext.ui/-list-style/ordered-markers/#orderedmarkers","text":"[androidJvm] Content val orderedMarkers : OrderedMarkers ? = null","title":"orderedMarkers"},{"location":"api/com.zachklipp.richtext.ui/-list-style/unordered-markers/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / unorderedMarkers unorderedMarkers \u00b6 [androidJvm] Content val unorderedMarkers : UnorderedMarkers ? = null","title":"Unordered markers"},{"location":"api/com.zachklipp.richtext.ui/-list-style/unordered-markers/#unorderedmarkers","text":"[androidJvm] Content val unorderedMarkers : UnorderedMarkers ? = null","title":"unorderedMarkers"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary Default [androidJvm] val Default : ListStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/#properties","text":"Name Summary Default [androidJvm] val Default : ListStyle","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/-default/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListStyle / Companion / Default Default \u00b6 [androidJvm] Content val Default : ListStyle","title":" default"},{"location":"api/com.zachklipp.richtext.ui/-list-style/-companion/-default/#default","text":"[androidJvm] Content val Default : ListStyle","title":"Default"},{"location":"api/com.zachklipp.richtext.ui/-list-type/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType ListType \u00b6 [androidJvm] enum ListType : Enum < ListType > Entries \u00b6 Name Summary Ordered [androidJvm] Ordered () An ordered (numbered) list. Unordered [androidJvm] Unordered () An unordered (bullet) list. Functions \u00b6 Name Summary compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-list-type/#listtype","text":"[androidJvm] enum ListType : Enum < ListType >","title":"ListType"},{"location":"api/com.zachklipp.richtext.ui/-list-type/#entries","text":"Name Summary Ordered [androidJvm] Ordered () An ordered (numbered) list. Unordered [androidJvm] Unordered () An unordered (bullet) list.","title":"Entries"},{"location":"api/com.zachklipp.richtext.ui/-list-type/#functions","text":"Name Summary compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-list-type/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-list-type/name/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/ordinal/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/com.zachklipp.richtext.ui/-list-type/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Ordered Ordered \u00b6 [androidJvm] Ordered () An ordered (numbered) list. Functions \u00b6 Name Summary clone [androidJvm] Content protected fun clone (): Any compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/#ordered","text":"[androidJvm] Ordered () An ordered (numbered) list.","title":"Ordered"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/#functions","text":"Name Summary clone [androidJvm] Content protected fun clone (): Any compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/name/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Ordered / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/ordinal/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Ordered / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-ordered/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Unordered Unordered \u00b6 [androidJvm] Unordered () An unordered (bullet) list. Functions \u00b6 Name Summary clone [androidJvm] Content protected fun clone (): Any compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/#unordered","text":"[androidJvm] Unordered () An unordered (bullet) list.","title":"Unordered"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/#functions","text":"Name Summary clone [androidJvm] Content protected fun clone (): Any compareTo [androidJvm] Content operator override fun compareTo (other: ListType ): Int equals [androidJvm] Content operator override fun equals (other: Any ?): Boolean finalize [androidJvm] Content fun finalize () getDeclaringClass [androidJvm] Content fun getDeclaringClass (): Class < ListType > hashCode [androidJvm] Content override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/#properties","text":"Name Summary name [androidJvm] val name : String ordinal [androidJvm] val ordinal : Int","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/name/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Unordered / name name \u00b6 [androidJvm] Content val name : String","title":"Name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/name/#name","text":"[androidJvm] Content val name : String","title":"name"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/ordinal/","text":"// compose-richtext / com.zachklipp.richtext.ui / ListType / Unordered / ordinal ordinal \u00b6 [androidJvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/com.zachklipp.richtext.ui/-list-type/-unordered/ordinal/#ordinal","text":"[androidJvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/","text":"// compose-richtext / com.zachklipp.richtext.ui / OrderedMarkers OrderedMarkers \u00b6 [androidJvm] interface OrderedMarkers Defines how to draw list markers for FormattedList s that are Ordered . These are typically some sort of ordinal text. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary drawMarker [androidJvm] Content @Composable() abstract fun drawMarker (level: Int , index: Int ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/#orderedmarkers","text":"[androidJvm] interface OrderedMarkers Defines how to draw list markers for FormattedList s that are Ordered . These are typically some sort of ordinal text.","title":"OrderedMarkers"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/#functions","text":"Name Summary drawMarker [androidJvm] Content @Composable() abstract fun drawMarker (level: Int , index: Int ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/draw-marker/","text":"// compose-richtext / com.zachklipp.richtext.ui / OrderedMarkers / drawMarker drawMarker \u00b6 [androidJvm] Content @Composable() abstract fun drawMarker (level: Int , index: Int )","title":"Draw marker"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/draw-marker/#drawmarker","text":"[androidJvm] Content @Composable() abstract fun drawMarker (level: Int , index: Int )","title":"drawMarker"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / OrderedMarkers / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int invoke [androidJvm] Content operator fun invoke (drawMarker: (level: Int , index: Int ) -> Unit ): OrderedMarkers More info Creates an OrderedMarkers from an arbitrary composable given the indentation level and the index. text [androidJvm] Content fun text (vararg markers: (index: Int ) -> String ): OrderedMarkers More info Creates an OrderedMarkers that will cycle through the values in markers for each indentation level given the index. toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int invoke [androidJvm] Content operator fun invoke (drawMarker: (level: Int , index: Int ) -> Unit ): OrderedMarkers More info Creates an OrderedMarkers from an arbitrary composable given the indentation level and the index. text [androidJvm] Content fun text (vararg markers: (index: Int ) -> String ): OrderedMarkers More info Creates an OrderedMarkers that will cycle through the values in markers for each indentation level given the index. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/invoke/","text":"// compose-richtext / com.zachklipp.richtext.ui / OrderedMarkers / Companion / invoke invoke \u00b6 [androidJvm] Content operator fun invoke (drawMarker: (level: Int , index: Int ) -> Unit ): OrderedMarkers More info Creates an OrderedMarkers from an arbitrary composable given the indentation level and the index.","title":"Invoke"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/invoke/#invoke","text":"[androidJvm] Content operator fun invoke (drawMarker: (level: Int , index: Int ) -> Unit ): OrderedMarkers More info Creates an OrderedMarkers from an arbitrary composable given the indentation level and the index.","title":"invoke"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/text/","text":"// compose-richtext / com.zachklipp.richtext.ui / OrderedMarkers / Companion / text text \u00b6 [androidJvm] Content fun text (vararg markers: (index: Int ) -> String ): OrderedMarkers More info Creates an OrderedMarkers that will cycle through the values in markers for each indentation level given the index.","title":"Text"},{"location":"api/com.zachklipp.richtext.ui/-ordered-markers/-companion/text/#text","text":"[androidJvm] Content fun text (vararg markers: (index: Int ) -> String ): OrderedMarkers More info Creates an OrderedMarkers that will cycle through the values in markers for each indentation level given the index.","title":"text"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-scope/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextScope RichTextScope \u00b6 [androidJvm] @Immutable() object RichTextScope Scope object for composables that can draw rich text. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Extensions \u00b6 Name Summary BlockQuote [androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side. CodeBlock [androidJvm] Content @Composable() fun RichTextScope . CodeBlock (text: String ) @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background. currentRichTextStyle [androidJvm] Content val RichTextScope . currentRichTextStyle : RichTextStyle More info The current RichTextStyle . FormattedList [androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list. Heading [androidJvm] Content @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) More info A section heading. HorizontalRule [androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color. Table [androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. Text [androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString . WithStyle [androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-scope/#richtextscope","text":"[androidJvm] @Immutable() object RichTextScope Scope object for composables that can draw rich text.","title":"RichTextScope"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-scope/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-scope/#extensions","text":"Name Summary BlockQuote [androidJvm] Content @Composable() fun RichTextScope . BlockQuote (children: RichTextScope .() -> Unit ) More info Draws a block quote, with a BlockQuoteGutter drawn beside the children on the start side. CodeBlock [androidJvm] Content @Composable() fun RichTextScope . CodeBlock (text: String ) @Composable() fun RichTextScope . CodeBlock (children: RichTextScope .() -> Unit ) More info A specially-formatted block of text that typically uses a monospace font with a tinted background. currentRichTextStyle [androidJvm] Content val RichTextScope . currentRichTextStyle : RichTextStyle More info The current RichTextStyle . FormattedList [androidJvm] Content @Composable() inline fun RichTextScope . FormattedList (listType: ListType , vararg children: RichTextScope .() -> Unit ) @Composable() fun < T > RichTextScope . FormattedList (listType: ListType , items: List < T >, drawItem: RichTextScope .( T ) -> Unit ) More info Creates a formatted list such as a bullet list or numbered list. Heading [androidJvm] Content @Composable() fun RichTextScope . Heading (@ IntRange (from = 0.toLong(), to = 9223372036854775807.toLong())level: Int , text: String ) @Composable() fun RichTextScope . Heading (level: Int , children: RichTextScope .() -> Unit ) More info A section heading. HorizontalRule [androidJvm] Content @Composable() fun RichTextScope . HorizontalRule () More info A simple horizontal line drawn with the current content color. Table [androidJvm] Content @Composable() fun RichTextScope . Table (modifier: Modifier = Modifier, headerRow: RichTextTableCellScope .() -> Unit ? = null, bodyRows: RichTextTableRowScope .() -> Unit ) More info Draws a table with an optional header row, and an arbitrary number of body rows. Text [androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString . WithStyle [androidJvm] Content @Composable() fun RichTextScope . WithStyle (style: RichTextStyle ?, children: RichTextScope .() -> Unit ) More info Sets the RichTextStyle for its children.","title":"Extensions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle RichTextStyle \u00b6 [androidJvm] @Immutable() data class RichTextStyle ( paragraphSpacing : TextUnit?, headingStyle : HeadingStyle ?, listStyle : ListStyle ?, blockQuoteGutter : BlockQuoteGutter ?, codeBlockStyle : CodeBlockStyle ?, tableStyle : TableStyle ?, stringStyle : RichTextStringStyle ?) Configures all formatting attributes for drawing rich text. Parameters \u00b6 androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text. headingStyle The HeadingStyle that defines how Heading s are drawn. listStyle The ListStyle used to format FormattedList s. blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn. tableStyle The TableStyle used to render Table s. stringStyle The RichTextStringStyle used to render RichTextString s Constructors \u00b6 Name Summary RichTextStyle [androidJvm] fun RichTextStyle (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null)The amount of space in between blocks of text. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit? component2 [androidJvm] Content operator fun component2 (): HeadingStyle ? component3 [androidJvm] Content operator fun component3 (): ListStyle ? component4 [androidJvm] Content operator fun component4 (): BlockQuoteGutter ? component5 [androidJvm] Content operator fun component5 (): CodeBlockStyle ? component6 [androidJvm] Content operator fun component6 (): TableStyle ? component7 [androidJvm] Content operator fun component7 (): RichTextStringStyle ? copy [androidJvm] Content fun copy (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null): RichTextStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary blockQuoteGutter [androidJvm] val blockQuoteGutter : BlockQuoteGutter ? = nullThe BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle [androidJvm] val codeBlockStyle : CodeBlockStyle ? = nullThe CodeBlockStyle that defines how CodeBlock s are drawn. headingStyle [androidJvm] val headingStyle : HeadingStyle ? = nullThe HeadingStyle that defines how Heading s are drawn. listStyle [androidJvm] val listStyle : ListStyle ? = nullThe ListStyle used to format FormattedList s. paragraphSpacing [androidJvm] val paragraphSpacing : TextUnit? = nullThe amount of space in between blocks of text. stringStyle [androidJvm] val stringStyle : RichTextStringStyle ? = nullThe RichTextStringStyle used to render RichTextString s tableStyle [androidJvm] val tableStyle : TableStyle ? = nullThe TableStyle used to render Table s. Extensions \u00b6 Name Summary merge [androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle resolveDefaults [androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#richtextstyle","text":"[androidJvm] @Immutable() data class RichTextStyle ( paragraphSpacing : TextUnit?, headingStyle : HeadingStyle ?, listStyle : ListStyle ?, blockQuoteGutter : BlockQuoteGutter ?, codeBlockStyle : CodeBlockStyle ?, tableStyle : TableStyle ?, stringStyle : RichTextStringStyle ?) Configures all formatting attributes for drawing rich text.","title":"RichTextStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#parameters","text":"androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text. headingStyle The HeadingStyle that defines how Heading s are drawn. listStyle The ListStyle used to format FormattedList s. blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn. tableStyle The TableStyle used to render Table s. stringStyle The RichTextStringStyle used to render RichTextString s","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#constructors","text":"Name Summary RichTextStyle [androidJvm] fun RichTextStyle (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null)The amount of space in between blocks of text.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): TextUnit? component2 [androidJvm] Content operator fun component2 (): HeadingStyle ? component3 [androidJvm] Content operator fun component3 (): ListStyle ? component4 [androidJvm] Content operator fun component4 (): BlockQuoteGutter ? component5 [androidJvm] Content operator fun component5 (): CodeBlockStyle ? component6 [androidJvm] Content operator fun component6 (): TableStyle ? component7 [androidJvm] Content operator fun component7 (): RichTextStringStyle ? copy [androidJvm] Content fun copy (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null): RichTextStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#properties","text":"Name Summary blockQuoteGutter [androidJvm] val blockQuoteGutter : BlockQuoteGutter ? = nullThe BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle [androidJvm] val codeBlockStyle : CodeBlockStyle ? = nullThe CodeBlockStyle that defines how CodeBlock s are drawn. headingStyle [androidJvm] val headingStyle : HeadingStyle ? = nullThe HeadingStyle that defines how Heading s are drawn. listStyle [androidJvm] val listStyle : ListStyle ? = nullThe ListStyle used to format FormattedList s. paragraphSpacing [androidJvm] val paragraphSpacing : TextUnit? = nullThe amount of space in between blocks of text. stringStyle [androidJvm] val stringStyle : RichTextStringStyle ? = nullThe RichTextStringStyle used to render RichTextString s tableStyle [androidJvm] val tableStyle : TableStyle ? = nullThe TableStyle used to render Table s.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/#extensions","text":"Name Summary merge [androidJvm] Content fun RichTextStyle . merge (otherStyle: RichTextStyle ?): RichTextStyle resolveDefaults [androidJvm] Content fun RichTextStyle . resolveDefaults (): RichTextStyle","title":"Extensions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-rich-text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / RichTextStyle RichTextStyle \u00b6 [androidJvm] Content fun RichTextStyle (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null) More info Parameters \u00b6 androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text. headingStyle The HeadingStyle that defines how Heading s are drawn. listStyle The ListStyle used to format FormattedList s. blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn. tableStyle The TableStyle used to render Table s. stringStyle The RichTextStringStyle used to render RichTextString s","title":" rich text style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-rich-text-style/#richtextstyle","text":"[androidJvm] Content fun RichTextStyle (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null) More info","title":"RichTextStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-rich-text-style/#parameters","text":"androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text. headingStyle The HeadingStyle that defines how Heading s are drawn. listStyle The ListStyle used to format FormattedList s. blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s. codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn. tableStyle The TableStyle used to render Table s. stringStyle The RichTextStringStyle used to render RichTextString s","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/block-quote-gutter/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / blockQuoteGutter blockQuoteGutter \u00b6 [androidJvm] Content val blockQuoteGutter : BlockQuoteGutter ? = null More info Parameters \u00b6 androidJvm Name Summary blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s.","title":"Block quote gutter"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/block-quote-gutter/#blockquotegutter","text":"[androidJvm] Content val blockQuoteGutter : BlockQuoteGutter ? = null More info","title":"blockQuoteGutter"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/block-quote-gutter/#parameters","text":"androidJvm Name Summary blockQuoteGutter The BlockQuoteGutter used to draw BlockQuote s.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/code-block-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / codeBlockStyle codeBlockStyle \u00b6 [androidJvm] Content val codeBlockStyle : CodeBlockStyle ? = null More info Parameters \u00b6 androidJvm Name Summary codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn.","title":"Code block style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/code-block-style/#codeblockstyle","text":"[androidJvm] Content val codeBlockStyle : CodeBlockStyle ? = null More info","title":"codeBlockStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/code-block-style/#parameters","text":"androidJvm Name Summary codeBlockStyle The CodeBlockStyle that defines how CodeBlock s are drawn.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): TextUnit?","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component1/#component1","text":"[androidJvm] Content operator fun component1 (): TextUnit?","title":"component1"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): HeadingStyle ?","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component2/#component2","text":"[androidJvm] Content operator fun component2 (): HeadingStyle ?","title":"component2"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): ListStyle ?","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component3/#component3","text":"[androidJvm] Content operator fun component3 (): ListStyle ?","title":"component3"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): BlockQuoteGutter ?","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component4/#component4","text":"[androidJvm] Content operator fun component4 (): BlockQuoteGutter ?","title":"component4"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component5/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component5 component5 \u00b6 [androidJvm] Content operator fun component5 (): CodeBlockStyle ?","title":"Component5"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component5/#component5","text":"[androidJvm] Content operator fun component5 (): CodeBlockStyle ?","title":"component5"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component6/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component6 component6 \u00b6 [androidJvm] Content operator fun component6 (): TableStyle ?","title":"Component6"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component6/#component6","text":"[androidJvm] Content operator fun component6 (): TableStyle ?","title":"component6"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component7/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / component7 component7 \u00b6 [androidJvm] Content operator fun component7 (): RichTextStringStyle ?","title":"Component7"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/component7/#component7","text":"[androidJvm] Content operator fun component7 (): RichTextStringStyle ?","title":"component7"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / copy copy \u00b6 [androidJvm] Content fun copy (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null): RichTextStyle","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/copy/#copy","text":"[androidJvm] Content fun copy (paragraphSpacing: TextUnit? = null, headingStyle: HeadingStyle ? = null, listStyle: ListStyle ? = null, blockQuoteGutter: BlockQuoteGutter ? = null, codeBlockStyle: CodeBlockStyle ? = null, tableStyle: TableStyle ? = null, stringStyle: RichTextStringStyle ? = null): RichTextStyle","title":"copy"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/heading-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / headingStyle headingStyle \u00b6 [androidJvm] Content val headingStyle : HeadingStyle ? = null More info Parameters \u00b6 androidJvm Name Summary headingStyle The HeadingStyle that defines how Heading s are drawn.","title":"Heading style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/heading-style/#headingstyle","text":"[androidJvm] Content val headingStyle : HeadingStyle ? = null More info","title":"headingStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/heading-style/#parameters","text":"androidJvm Name Summary headingStyle The HeadingStyle that defines how Heading s are drawn.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/list-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / listStyle listStyle \u00b6 [androidJvm] Content val listStyle : ListStyle ? = null More info Parameters \u00b6 androidJvm Name Summary listStyle The ListStyle used to format FormattedList s.","title":"List style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/list-style/#liststyle","text":"[androidJvm] Content val listStyle : ListStyle ? = null More info","title":"listStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/list-style/#parameters","text":"androidJvm Name Summary listStyle The ListStyle used to format FormattedList s.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/paragraph-spacing/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / paragraphSpacing paragraphSpacing \u00b6 [androidJvm] Content val paragraphSpacing : TextUnit? = null More info Parameters \u00b6 androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text.","title":"Paragraph spacing"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/paragraph-spacing/#paragraphspacing","text":"[androidJvm] Content val paragraphSpacing : TextUnit? = null More info","title":"paragraphSpacing"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/paragraph-spacing/#parameters","text":"androidJvm Name Summary paragraphSpacing The amount of space in between blocks of text.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/string-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / stringStyle stringStyle \u00b6 [androidJvm] Content val stringStyle : RichTextStringStyle ? = null More info Parameters \u00b6 androidJvm Name Summary stringStyle The RichTextStringStyle used to render RichTextString s","title":"String style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/string-style/#stringstyle","text":"[androidJvm] Content val stringStyle : RichTextStringStyle ? = null More info","title":"stringStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/string-style/#parameters","text":"androidJvm Name Summary stringStyle The RichTextStringStyle used to render RichTextString s","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/table-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / tableStyle tableStyle \u00b6 [androidJvm] Content val tableStyle : TableStyle ? = null More info Parameters \u00b6 androidJvm Name Summary tableStyle The TableStyle used to render Table s.","title":"Table style"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/table-style/#tablestyle","text":"[androidJvm] Content val tableStyle : TableStyle ? = null More info","title":"tableStyle"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/table-style/#parameters","text":"androidJvm Name Summary tableStyle The TableStyle used to render Table s.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary Default [androidJvm] val Default : RichTextStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/#properties","text":"Name Summary Default [androidJvm] val Default : RichTextStyle","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/-default/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextStyle / Companion / Default Default \u00b6 [androidJvm] Content val Default : RichTextStyle","title":" default"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-style/-companion/-default/#default","text":"[androidJvm] Content val Default : RichTextStyle","title":"Default"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-cell-scope/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextTableCellScope RichTextTableCellScope \u00b6 [androidJvm] interface RichTextTableCellScope Functions \u00b6 Name Summary cell [androidJvm] Content abstract fun cell (children: RichTextScope .() -> Unit ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-cell-scope/#richtexttablecellscope","text":"[androidJvm] interface RichTextTableCellScope","title":"RichTextTableCellScope"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-cell-scope/#functions","text":"Name Summary cell [androidJvm] Content abstract fun cell (children: RichTextScope .() -> Unit ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-cell-scope/cell/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextTableCellScope / cell cell \u00b6 [androidJvm] Content abstract fun cell (children: RichTextScope .() -> Unit )","title":"Cell"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-cell-scope/cell/#cell","text":"[androidJvm] Content abstract fun cell (children: RichTextScope .() -> Unit )","title":"cell"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-row-scope/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextTableRowScope RichTextTableRowScope \u00b6 [androidJvm] interface RichTextTableRowScope Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int row [androidJvm] Content abstract fun row (children: RichTextTableCellScope .() -> Unit ) toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-row-scope/#richtexttablerowscope","text":"[androidJvm] interface RichTextTableRowScope","title":"RichTextTableRowScope"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-row-scope/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int row [androidJvm] Content abstract fun row (children: RichTextTableCellScope .() -> Unit ) toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-row-scope/row/","text":"// compose-richtext / com.zachklipp.richtext.ui / RichTextTableRowScope / row row \u00b6 [androidJvm] Content abstract fun row (children: RichTextTableCellScope .() -> Unit )","title":"Row"},{"location":"api/com.zachklipp.richtext.ui/-rich-text-table-row-scope/row/#row","text":"[androidJvm] Content abstract fun row (children: RichTextTableCellScope .() -> Unit )","title":"row"},{"location":"api/com.zachklipp.richtext.ui/-table-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle TableStyle \u00b6 [androidJvm] @Immutable() data class TableStyle ( headerTextStyle : TextStyle?, cellPadding : TextUnit?, borderColor : Color?, borderStrokeWidth : Float ?) Defines the visual style for a Table . Parameters \u00b6 androidJvm Name Summary headerTextStyle The TextStyle used for header rows. cellPadding The spacing between the contents of each cell and the borders. borderColor The Color of the table border. borderStrokeWidth The width of the table border. Constructors \u00b6 Name Summary TableStyle [androidJvm] fun TableStyle (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null)The TextStyle used for header rows. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): TextStyle? component2 [androidJvm] Content operator fun component2 (): TextUnit? component3 [androidJvm] Content operator fun component3 (): Color? component4 [androidJvm] Content operator fun component4 (): Float ? copy [androidJvm] Content fun copy (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null): TableStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary borderColor [androidJvm] val borderColor : Color? = nullThe Color of the table border. borderStrokeWidth [androidJvm] val borderStrokeWidth : Float ? = nullThe width of the table border. cellPadding [androidJvm] val cellPadding : TextUnit? = nullThe spacing between the contents of each cell and the borders. headerTextStyle [androidJvm] val headerTextStyle : TextStyle? = nullThe TextStyle used for header rows.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#tablestyle","text":"[androidJvm] @Immutable() data class TableStyle ( headerTextStyle : TextStyle?, cellPadding : TextUnit?, borderColor : Color?, borderStrokeWidth : Float ?) Defines the visual style for a Table .","title":"TableStyle"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#parameters","text":"androidJvm Name Summary headerTextStyle The TextStyle used for header rows. cellPadding The spacing between the contents of each cell and the borders. borderColor The Color of the table border. borderStrokeWidth The width of the table border.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#constructors","text":"Name Summary TableStyle [androidJvm] fun TableStyle (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null)The TextStyle used for header rows.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): TextStyle? component2 [androidJvm] Content operator fun component2 (): TextUnit? component3 [androidJvm] Content operator fun component3 (): Color? component4 [androidJvm] Content operator fun component4 (): Float ? copy [androidJvm] Content fun copy (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null): TableStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-table-style/#properties","text":"Name Summary borderColor [androidJvm] val borderColor : Color? = nullThe Color of the table border. borderStrokeWidth [androidJvm] val borderStrokeWidth : Float ? = nullThe width of the table border. cellPadding [androidJvm] val cellPadding : TextUnit? = nullThe spacing between the contents of each cell and the borders. headerTextStyle [androidJvm] val headerTextStyle : TextStyle? = nullThe TextStyle used for header rows.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-table-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / TableStyle TableStyle \u00b6 [androidJvm] Content fun TableStyle (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null) More info Parameters \u00b6 androidJvm Name Summary headerTextStyle The TextStyle used for header rows. cellPadding The spacing between the contents of each cell and the borders. borderColor The Color of the table border. borderStrokeWidth The width of the table border.","title":" table style"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-table-style/#tablestyle","text":"[androidJvm] Content fun TableStyle (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null) More info","title":"TableStyle"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-table-style/#parameters","text":"androidJvm Name Summary headerTextStyle The TextStyle used for header rows. cellPadding The spacing between the contents of each cell and the borders. borderColor The Color of the table border. borderStrokeWidth The width of the table border.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-color/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / borderColor borderColor \u00b6 [androidJvm] Content val borderColor : Color? = null More info Parameters \u00b6 androidJvm Name Summary borderColor The Color of the table border.","title":"Border color"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-color/#bordercolor","text":"[androidJvm] Content val borderColor : Color? = null More info","title":"borderColor"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-color/#parameters","text":"androidJvm Name Summary borderColor The Color of the table border.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-stroke-width/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / borderStrokeWidth borderStrokeWidth \u00b6 [androidJvm] Content val borderStrokeWidth : Float ? = null More info Parameters \u00b6 androidJvm Name Summary borderStrokeWidth The width of the table border.","title":"Border stroke width"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-stroke-width/#borderstrokewidth","text":"[androidJvm] Content val borderStrokeWidth : Float ? = null More info","title":"borderStrokeWidth"},{"location":"api/com.zachklipp.richtext.ui/-table-style/border-stroke-width/#parameters","text":"androidJvm Name Summary borderStrokeWidth The width of the table border.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/cell-padding/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / cellPadding cellPadding \u00b6 [androidJvm] Content val cellPadding : TextUnit? = null More info Parameters \u00b6 androidJvm Name Summary cellPadding The spacing between the contents of each cell and the borders.","title":"Cell padding"},{"location":"api/com.zachklipp.richtext.ui/-table-style/cell-padding/#cellpadding","text":"[androidJvm] Content val cellPadding : TextUnit? = null More info","title":"cellPadding"},{"location":"api/com.zachklipp.richtext.ui/-table-style/cell-padding/#parameters","text":"androidJvm Name Summary cellPadding The spacing between the contents of each cell and the borders.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): TextStyle?","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component1/#component1","text":"[androidJvm] Content operator fun component1 (): TextStyle?","title":"component1"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): TextUnit?","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component2/#component2","text":"[androidJvm] Content operator fun component2 (): TextUnit?","title":"component2"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): Color?","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component3/#component3","text":"[androidJvm] Content operator fun component3 (): Color?","title":"component3"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): Float ?","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui/-table-style/component4/#component4","text":"[androidJvm] Content operator fun component4 (): Float ?","title":"component4"},{"location":"api/com.zachklipp.richtext.ui/-table-style/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / copy copy \u00b6 [androidJvm] Content fun copy (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null): TableStyle","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui/-table-style/copy/#copy","text":"[androidJvm] Content fun copy (headerTextStyle: TextStyle? = null, cellPadding: TextUnit? = null, borderColor: Color? = null, borderStrokeWidth: Float ? = null): TableStyle","title":"copy"},{"location":"api/com.zachklipp.richtext.ui/-table-style/header-text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / headerTextStyle headerTextStyle \u00b6 [androidJvm] Content val headerTextStyle : TextStyle? = null More info Parameters \u00b6 androidJvm Name Summary headerTextStyle The TextStyle used for header rows.","title":"Header text style"},{"location":"api/com.zachklipp.richtext.ui/-table-style/header-text-style/#headertextstyle","text":"[androidJvm] Content val headerTextStyle : TextStyle? = null More info","title":"headerTextStyle"},{"location":"api/com.zachklipp.richtext.ui/-table-style/header-text-style/#parameters","text":"androidJvm Name Summary headerTextStyle The TextStyle used for header rows.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary Default [androidJvm] val Default : TableStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/#properties","text":"Name Summary Default [androidJvm] val Default : TableStyle","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/-default/","text":"// compose-richtext / com.zachklipp.richtext.ui / TableStyle / Companion / Default Default \u00b6 [androidJvm] Content val Default : TableStyle","title":" default"},{"location":"api/com.zachklipp.richtext.ui/-table-style/-companion/-default/#default","text":"[androidJvm] Content val Default : TableStyle","title":"Default"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers UnorderedMarkers \u00b6 [androidJvm] interface UnorderedMarkers Defines how to draw list markers for FormattedList s that are Unordered . These are typically some sort of bullet point. Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary drawMarker [androidJvm] Content @Composable() abstract fun drawMarker (level: Int ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/#unorderedmarkers","text":"[androidJvm] interface UnorderedMarkers Defines how to draw list markers for FormattedList s that are Unordered . These are typically some sort of bullet point.","title":"UnorderedMarkers"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/#functions","text":"Name Summary drawMarker [androidJvm] Content @Composable() abstract fun drawMarker (level: Int ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/draw-marker/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers / drawMarker drawMarker \u00b6 [androidJvm] Content @Composable() abstract fun drawMarker (level: Int )","title":"Draw marker"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/draw-marker/#drawmarker","text":"[androidJvm] Content @Composable() abstract fun drawMarker (level: Int )","title":"drawMarker"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int invoke [androidJvm] Content operator fun invoke (drawMarker: (level: Int ) -> Unit ): UnorderedMarkers More info Creates an UnorderedMarkers from an arbitrary composable given the indentation level. painters [androidJvm] Content fun painters (vararg painters: Painter): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in painters for each indentation level. text [androidJvm] Content fun text (vararg markers: String ): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in markers for each indentation level. toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int invoke [androidJvm] Content operator fun invoke (drawMarker: (level: Int ) -> Unit ): UnorderedMarkers More info Creates an UnorderedMarkers from an arbitrary composable given the indentation level. painters [androidJvm] Content fun painters (vararg painters: Painter): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in painters for each indentation level. text [androidJvm] Content fun text (vararg markers: String ): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in markers for each indentation level. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/invoke/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers / Companion / invoke invoke \u00b6 [androidJvm] Content operator fun invoke (drawMarker: (level: Int ) -> Unit ): UnorderedMarkers More info Creates an UnorderedMarkers from an arbitrary composable given the indentation level.","title":"Invoke"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/invoke/#invoke","text":"[androidJvm] Content operator fun invoke (drawMarker: (level: Int ) -> Unit ): UnorderedMarkers More info Creates an UnorderedMarkers from an arbitrary composable given the indentation level.","title":"invoke"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/painters/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers / Companion / painters painters \u00b6 [androidJvm] Content fun painters (vararg painters: Painter): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in painters for each indentation level.","title":"Painters"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/painters/#painters","text":"[androidJvm] Content fun painters (vararg painters: Painter): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in painters for each indentation level.","title":"painters"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/text/","text":"// compose-richtext / com.zachklipp.richtext.ui / UnorderedMarkers / Companion / text text \u00b6 [androidJvm] Content fun text (vararg markers: String ): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in markers for each indentation level.","title":"Text"},{"location":"api/com.zachklipp.richtext.ui/-unordered-markers/-companion/text/#text","text":"[androidJvm] Content fun text (vararg markers: String ): UnorderedMarkers More info Creates an UnorderedMarkers that will cycle through the values in markers for each indentation level.","title":"text"},{"location":"api/com.zachklipp.richtext.ui.printing/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing Package com.zachklipp.richtext.ui.printing \u00b6 Types \u00b6 Name Summary ComposePrintAdapter [androidJvm] Content class ComposePrintAdapter ( activity : ComponentActivity , documentName : String , pageModifier : Modifier, pageDpi : Int , printBreakpoints : Boolean , mainContext : CoroutineContext , ioDispatcher : CoroutineDispatcher, content : () -> Unit ) : CoroutinePrintDocumentAdapter More info A PrintDocumentAdapter that prints a composable function. CoroutinePrintDocumentAdapter [androidJvm] Content abstract class CoroutinePrintDocumentAdapter ( context : CoroutineContext ) : PrintDocumentAdapter More info A PrintDocumentAdapter that exposes onLayout and onWrite functions as suspend functions that will automatically invoke the correct callback methods. PageBreakpoint [androidJvm] Content @Immutable() data class PageBreakpoint ( xAnchorPx : Pair < Int , Int >, yPx : Int , forceBreak : Boolean ) More info Represents a point in a composition where it is safe to break the page. PageLayoutResult [androidJvm] Content @Immutable() interface PageLayoutResult More info After the first frame of a Paged is committed, the breakpoints and page offsets are calculated and passed to a callback via an instance of this interface. PrintableController [androidJvm] Content abstract class PrintableController More info Provides the print method to trigger printing Printable composables. Functions \u00b6 Name Summary hideWhenPrinting [androidJvm] Content fun Modifier. hideWhenPrinting (): Modifier More info Returns a Modifier that will hide the composable it's applied to when printing. keepOnPageWithNext [androidJvm] Content fun Modifier. keepOnPageWithNext (): Modifier More info Returns a Modifier that will prevent Paged from putting a page break between this composable and the next. Paged [androidJvm] Content @Composable() fun Paged (modifier: Modifier = Modifier, pageIndex: Int = 0, pageModifier: Modifier = Modifier, clipLastBreakpoint: Boolean = true, drawBreakpoints: Boolean = false, onPageLayout: (pageCount: Int ) -> Unit ? = null, content: () -> Unit ) More info Divides a composable into discreet pages. Printable [androidJvm] Content @Composable() fun Printable (controller: PrintableController , modifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, content: () -> Unit ) More info Renders content as-is, and will allow the content to be printed with PrintableController . rememberPrintableController [androidJvm] Content @Composable() fun rememberPrintableController (): PrintableController More info Creates and remembers a PrintableController that can be passed to Printable to start print jobs. responsivePadding [androidJvm] Content fun Modifier. responsivePadding (vararg minDimensionsToPadding: Pair ): Modifier More info A Modifier that adds different padding depending on the minimum dimension of the max constraints. Properties \u00b6 Name Summary DefaultPageDpi [androidJvm] const val DefaultPageDpi : Int = 100 isBeingPrinted [androidJvm] val isBeingPrinted : Boolean Returns true if a Printable is being used to print the composition somewhere up in the tree.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/#package-comzachklipprichtextuiprinting","text":"","title":"Package com.zachklipp.richtext.ui.printing"},{"location":"api/com.zachklipp.richtext.ui.printing/#types","text":"Name Summary ComposePrintAdapter [androidJvm] Content class ComposePrintAdapter ( activity : ComponentActivity , documentName : String , pageModifier : Modifier, pageDpi : Int , printBreakpoints : Boolean , mainContext : CoroutineContext , ioDispatcher : CoroutineDispatcher, content : () -> Unit ) : CoroutinePrintDocumentAdapter More info A PrintDocumentAdapter that prints a composable function. CoroutinePrintDocumentAdapter [androidJvm] Content abstract class CoroutinePrintDocumentAdapter ( context : CoroutineContext ) : PrintDocumentAdapter More info A PrintDocumentAdapter that exposes onLayout and onWrite functions as suspend functions that will automatically invoke the correct callback methods. PageBreakpoint [androidJvm] Content @Immutable() data class PageBreakpoint ( xAnchorPx : Pair < Int , Int >, yPx : Int , forceBreak : Boolean ) More info Represents a point in a composition where it is safe to break the page. PageLayoutResult [androidJvm] Content @Immutable() interface PageLayoutResult More info After the first frame of a Paged is committed, the breakpoints and page offsets are calculated and passed to a callback via an instance of this interface. PrintableController [androidJvm] Content abstract class PrintableController More info Provides the print method to trigger printing Printable composables.","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.printing/#functions","text":"Name Summary hideWhenPrinting [androidJvm] Content fun Modifier. hideWhenPrinting (): Modifier More info Returns a Modifier that will hide the composable it's applied to when printing. keepOnPageWithNext [androidJvm] Content fun Modifier. keepOnPageWithNext (): Modifier More info Returns a Modifier that will prevent Paged from putting a page break between this composable and the next. Paged [androidJvm] Content @Composable() fun Paged (modifier: Modifier = Modifier, pageIndex: Int = 0, pageModifier: Modifier = Modifier, clipLastBreakpoint: Boolean = true, drawBreakpoints: Boolean = false, onPageLayout: (pageCount: Int ) -> Unit ? = null, content: () -> Unit ) More info Divides a composable into discreet pages. Printable [androidJvm] Content @Composable() fun Printable (controller: PrintableController , modifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, content: () -> Unit ) More info Renders content as-is, and will allow the content to be printed with PrintableController . rememberPrintableController [androidJvm] Content @Composable() fun rememberPrintableController (): PrintableController More info Creates and remembers a PrintableController that can be passed to Printable to start print jobs. responsivePadding [androidJvm] Content fun Modifier. responsivePadding (vararg minDimensionsToPadding: Pair ): Modifier More info A Modifier that adds different padding depending on the minimum dimension of the max constraints.","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/#properties","text":"Name Summary DefaultPageDpi [androidJvm] const val DefaultPageDpi : Int = 100 isBeingPrinted [androidJvm] val isBeingPrinted : Boolean Returns true if a Printable is being used to print the composition somewhere up in the tree.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.printing/-default-page-dpi/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / DefaultPageDpi DefaultPageDpi \u00b6 [androidJvm] Content const val DefaultPageDpi : Int = 100","title":" default page dpi"},{"location":"api/com.zachklipp.richtext.ui.printing/-default-page-dpi/#defaultpagedpi","text":"[androidJvm] Content const val DefaultPageDpi : Int = 100","title":"DefaultPageDpi"},{"location":"api/com.zachklipp.richtext.ui.printing/-paged/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / Paged Paged \u00b6 [androidJvm] Content @Composable() fun Paged (modifier: Modifier = Modifier, pageIndex: Int = 0, pageModifier: Modifier = Modifier, clipLastBreakpoint: Boolean = true, drawBreakpoints: Boolean = false, onPageLayout: (pageCount: Int ) -> Unit ? = null, content: () -> Unit ) More info Divides a composable into discreet pages. The content is measured with unbounded height, and then displayed using the current constraints, starting at pageIndex (the content is translated up). The bottom of the content is clipped, but a best-effort attempt is made to not cut any individual composables off in the middle. When the initial \"pagination\" measurement is complete, onPageLayout is invoked with the total page count. Pagination \u00b6 In order to calculate where to clip each page, this composable uses the Compose tooling library to analyze the entire slot table. It collects all the leaf LayoutNodes (those without children) and reports their bounds. The nodes are then sorted by their bottom bound, and nodes that are overlapped are removed (the bottom-most composables are kept). The remaining nodes bounds are returned as PageBreakpoint s in a PageLayoutResult . The Modifier.keepOnSamePage modifier can be used to keep a composable's children together. The PageLayoutResult then iterates through all the breakpoints and determines the offsets of the start of each page (see PageLayoutResult.pageOffsetsPx ). There are some known issues with the current implementation: Only the slot table for the current composition is analyzed. Any children which use subcomposition (e.g. WithConstraints, LazyColumn) will be considered as a \"leaf\" composable. Large text blocks are treated as a single unit, individual lines will not be broken across pages. Nested [Paged](-paged.md) composables are not supported (behavior is undefined). Parameters \u00b6 androidJvm Name Summary modifier A Modifier that will always be applied to content. pageIndex The index of the page to render. Valid values are between 0 and the value passed to the onPageLayout callback. pageModifier A Modifier that is applied to each page, and not affected by pagination. clipLastBreakpoint If false, the content at the end of the current page will be clipped exactly at the page bounds, not at the nearest breakpoint. True by default. drawBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. onPageLayout Callback that will be invoked after calculating the total number of pages.","title":" paged"},{"location":"api/com.zachklipp.richtext.ui.printing/-paged/#paged","text":"[androidJvm] Content @Composable() fun Paged (modifier: Modifier = Modifier, pageIndex: Int = 0, pageModifier: Modifier = Modifier, clipLastBreakpoint: Boolean = true, drawBreakpoints: Boolean = false, onPageLayout: (pageCount: Int ) -> Unit ? = null, content: () -> Unit ) More info Divides a composable into discreet pages. The content is measured with unbounded height, and then displayed using the current constraints, starting at pageIndex (the content is translated up). The bottom of the content is clipped, but a best-effort attempt is made to not cut any individual composables off in the middle. When the initial \"pagination\" measurement is complete, onPageLayout is invoked with the total page count.","title":"Paged"},{"location":"api/com.zachklipp.richtext.ui.printing/-paged/#pagination","text":"In order to calculate where to clip each page, this composable uses the Compose tooling library to analyze the entire slot table. It collects all the leaf LayoutNodes (those without children) and reports their bounds. The nodes are then sorted by their bottom bound, and nodes that are overlapped are removed (the bottom-most composables are kept). The remaining nodes bounds are returned as PageBreakpoint s in a PageLayoutResult . The Modifier.keepOnSamePage modifier can be used to keep a composable's children together. The PageLayoutResult then iterates through all the breakpoints and determines the offsets of the start of each page (see PageLayoutResult.pageOffsetsPx ). There are some known issues with the current implementation: Only the slot table for the current composition is analyzed. Any children which use subcomposition (e.g. WithConstraints, LazyColumn) will be considered as a \"leaf\" composable. Large text blocks are treated as a single unit, individual lines will not be broken across pages. Nested [Paged](-paged.md) composables are not supported (behavior is undefined).","title":"Pagination"},{"location":"api/com.zachklipp.richtext.ui.printing/-paged/#parameters","text":"androidJvm Name Summary modifier A Modifier that will always be applied to content. pageIndex The index of the page to render. Valid values are between 0 and the value passed to the onPageLayout callback. pageModifier A Modifier that is applied to each page, and not affected by pagination. clipLastBreakpoint If false, the content at the end of the current page will be clipped exactly at the page bounds, not at the nearest breakpoint. True by default. drawBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. onPageLayout Callback that will be invoked after calculating the total number of pages.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / Printable Printable \u00b6 [androidJvm] Content @Composable() fun Printable (controller: PrintableController , modifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, content: () -> Unit ) More info Renders content as-is, and will allow the content to be printed with PrintableController . To start a print job, call PrintableController.print . Inside content, the hideWhenPrinting modifier and isBeingPrinted property can be used to conditionally change your UI based on whether it's being printed or not. Parameters \u00b6 androidJvm Name Summary controller A PrintableController created by rememberPrintableController . modifier A Modifier that will be applied to the content normally when composing to the screen, and to every individual page when printing. pageDpi The resolution to use for the printed page. Lower values mean smaller text. Has no effect when composing to the screen. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default.","title":" printable"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable/#printable","text":"[androidJvm] Content @Composable() fun Printable (controller: PrintableController , modifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, content: () -> Unit ) More info Renders content as-is, and will allow the content to be printed with PrintableController . To start a print job, call PrintableController.print . Inside content, the hideWhenPrinting modifier and isBeingPrinted property can be used to conditionally change your UI based on whether it's being printed or not.","title":"Printable"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable/#parameters","text":"androidJvm Name Summary controller A PrintableController created by rememberPrintableController . modifier A Modifier that will be applied to the content normally when composing to the screen, and to every individual page when printing. pageDpi The resolution to use for the printed page. Lower values mean smaller text. Has no effect when composing to the screen. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/hide-when-printing/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / hideWhenPrinting hideWhenPrinting \u00b6 [androidJvm] Content fun Modifier. hideWhenPrinting (): Modifier More info Returns a Modifier that will hide the composable it's applied to when printing.","title":"Hide when printing"},{"location":"api/com.zachklipp.richtext.ui.printing/hide-when-printing/#hidewhenprinting","text":"[androidJvm] Content fun Modifier. hideWhenPrinting (): Modifier More info Returns a Modifier that will hide the composable it's applied to when printing.","title":"hideWhenPrinting"},{"location":"api/com.zachklipp.richtext.ui.printing/is-being-printed/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / isBeingPrinted isBeingPrinted \u00b6 [androidJvm] Content val isBeingPrinted : Boolean More info Returns true if a Printable is being used to print the composition somewhere up in the tree.","title":"Is being printed"},{"location":"api/com.zachklipp.richtext.ui.printing/is-being-printed/#isbeingprinted","text":"[androidJvm] Content val isBeingPrinted : Boolean More info Returns true if a Printable is being used to print the composition somewhere up in the tree.","title":"isBeingPrinted"},{"location":"api/com.zachklipp.richtext.ui.printing/keep-on-page-with-next/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / keepOnPageWithNext keepOnPageWithNext \u00b6 [androidJvm] Content fun Modifier. keepOnPageWithNext (): Modifier More info Returns a Modifier that will prevent Paged from putting a page break between this composable and the next. This modifier must come before other layout modifiers, or it will have no effect.","title":"Keep on page with next"},{"location":"api/com.zachklipp.richtext.ui.printing/keep-on-page-with-next/#keeponpagewithnext","text":"[androidJvm] Content fun Modifier. keepOnPageWithNext (): Modifier More info Returns a Modifier that will prevent Paged from putting a page break between this composable and the next. This modifier must come before other layout modifiers, or it will have no effect.","title":"keepOnPageWithNext"},{"location":"api/com.zachklipp.richtext.ui.printing/remember-printable-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / rememberPrintableController rememberPrintableController \u00b6 [androidJvm] Content @Composable() fun rememberPrintableController (): PrintableController More info Creates and remembers a PrintableController that can be passed to Printable to start print jobs.","title":"Remember printable controller"},{"location":"api/com.zachklipp.richtext.ui.printing/remember-printable-controller/#rememberprintablecontroller","text":"[androidJvm] Content @Composable() fun rememberPrintableController (): PrintableController More info Creates and remembers a PrintableController that can be passed to Printable to start print jobs.","title":"rememberPrintableController"},{"location":"api/com.zachklipp.richtext.ui.printing/responsive-padding/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / responsivePadding responsivePadding \u00b6 [androidJvm] Content fun Modifier. responsivePadding (vararg minDimensionsToPadding: Pair ): Modifier More info A Modifier that adds different padding depending on the minimum dimension of the max constraints. This modifier is especially useful when passed to the Printable composable, in which case the modifier will be applied to every page of the printed document and can be used to create page margins.","title":"Responsive padding"},{"location":"api/com.zachklipp.richtext.ui.printing/responsive-padding/#responsivepadding","text":"[androidJvm] Content fun Modifier. responsivePadding (vararg minDimensionsToPadding: Pair ): Modifier More info A Modifier that adds different padding depending on the minimum dimension of the max constraints. This modifier is especially useful when passed to the Printable composable, in which case the modifier will be applied to every page of the printed document and can be used to create page margins.","title":"responsivePadding"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / ComposePrintAdapter ComposePrintAdapter \u00b6 [androidJvm] class ComposePrintAdapter ( activity : ComponentActivity , documentName : String , pageModifier : Modifier, pageDpi : Int , printBreakpoints : Boolean , mainContext : CoroutineContext , ioDispatcher : CoroutineDispatcher, content : () -> Unit ) : CoroutinePrintDocumentAdapter A PrintDocumentAdapter that prints a composable function. The composable content is paginated as best-effort to avoid cutting off composables in the middle (see Paged ). Long blocks of text and subcompositions are not fully supported: the paginator will try to not split them, but if they don't fit on a page, they will be split arbitrarily. See composeToPdf for details on how the composable is actually written to the PDF. Parameters \u00b6 androidJvm Name Summary activity The ComponentActivity used to create various printing resources. documentName The file name that will be reported to the printing system, e.g. to use as the default for the Save to PDF virtual printer. pageModifier A Modifier that will be applied to each individual page of the printed content. responsivePadding is a good choice. pageDpi The resolution to use for the Density of the composable. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. mainContext The CoroutineContext to interact with the composable and view system on. Constructors \u00b6 Name Summary ComposePrintAdapter [androidJvm] fun ComposePrintAdapter (activity: ComponentActivity , documentName: String , pageModifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, mainContext: CoroutineContext = Dispatchers.Main, ioDispatcher: CoroutineDispatcher = Dispatchers.IO, content: () -> Unit )The ComponentActivity used to create various printing resources. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int onFinish [androidJvm] Content open override fun onFinish () onLayout [androidJvm] Content open suspend override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?) onStart [androidJvm] Content open fun onStart () onWrite [androidJvm] Content open suspend override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback ) toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/#composeprintadapter","text":"[androidJvm] class ComposePrintAdapter ( activity : ComponentActivity , documentName : String , pageModifier : Modifier, pageDpi : Int , printBreakpoints : Boolean , mainContext : CoroutineContext , ioDispatcher : CoroutineDispatcher, content : () -> Unit ) : CoroutinePrintDocumentAdapter A PrintDocumentAdapter that prints a composable function. The composable content is paginated as best-effort to avoid cutting off composables in the middle (see Paged ). Long blocks of text and subcompositions are not fully supported: the paginator will try to not split them, but if they don't fit on a page, they will be split arbitrarily. See composeToPdf for details on how the composable is actually written to the PDF.","title":"ComposePrintAdapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/#parameters","text":"androidJvm Name Summary activity The ComponentActivity used to create various printing resources. documentName The file name that will be reported to the printing system, e.g. to use as the default for the Save to PDF virtual printer. pageModifier A Modifier that will be applied to each individual page of the printed content. responsivePadding is a good choice. pageDpi The resolution to use for the Density of the composable. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. mainContext The CoroutineContext to interact with the composable and view system on.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/#constructors","text":"Name Summary ComposePrintAdapter [androidJvm] fun ComposePrintAdapter (activity: ComponentActivity , documentName: String , pageModifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, mainContext: CoroutineContext = Dispatchers.Main, ioDispatcher: CoroutineDispatcher = Dispatchers.IO, content: () -> Unit )The ComponentActivity used to create various printing resources.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int onFinish [androidJvm] Content open override fun onFinish () onLayout [androidJvm] Content open suspend override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?) onStart [androidJvm] Content open fun onStart () onWrite [androidJvm] Content open suspend override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback ) toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/-compose-print-adapter/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / ComposePrintAdapter / ComposePrintAdapter ComposePrintAdapter \u00b6 [androidJvm] Content fun ComposePrintAdapter (activity: ComponentActivity , documentName: String , pageModifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, mainContext: CoroutineContext = Dispatchers.Main, ioDispatcher: CoroutineDispatcher = Dispatchers.IO, content: () -> Unit ) More info Parameters \u00b6 androidJvm Name Summary activity The ComponentActivity used to create various printing resources. documentName The file name that will be reported to the printing system, e.g. to use as the default for the Save to PDF virtual printer. pageModifier A Modifier that will be applied to each individual page of the printed content. responsivePadding is a good choice. pageDpi The resolution to use for the Density of the composable. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. mainContext The CoroutineContext to interact with the composable and view system on.","title":" compose print adapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/-compose-print-adapter/#composeprintadapter","text":"[androidJvm] Content fun ComposePrintAdapter (activity: ComponentActivity , documentName: String , pageModifier: Modifier = Modifier, pageDpi: Int = DefaultPageDpi, printBreakpoints: Boolean = false, mainContext: CoroutineContext = Dispatchers.Main, ioDispatcher: CoroutineDispatcher = Dispatchers.IO, content: () -> Unit ) More info","title":"ComposePrintAdapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/-compose-print-adapter/#parameters","text":"androidJvm Name Summary activity The ComponentActivity used to create various printing resources. documentName The file name that will be reported to the printing system, e.g. to use as the default for the Save to PDF virtual printer. pageModifier A Modifier that will be applied to each individual page of the printed content. responsivePadding is a good choice. pageDpi The resolution to use for the Density of the composable. printBreakpoints If true, horizontal lines are drawn at each breakpoint for debugging. False by default. mainContext The CoroutineContext to interact with the composable and view system on.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/on-layout/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / ComposePrintAdapter / onLayout onLayout \u00b6 [androidJvm] Content open suspend override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo","title":"On layout"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/on-layout/#onlayout","text":"[androidJvm] Content open suspend override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo","title":"onLayout"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/on-write/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / ComposePrintAdapter / onWrite onWrite \u00b6 [androidJvm] Content open suspend override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange >","title":"On write"},{"location":"api/com.zachklipp.richtext.ui.printing/-compose-print-adapter/on-write/#onwrite","text":"[androidJvm] Content open suspend override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange >","title":"onWrite"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / CoroutinePrintDocumentAdapter CoroutinePrintDocumentAdapter \u00b6 [androidJvm] abstract class CoroutinePrintDocumentAdapter ( context : CoroutineContext ) : PrintDocumentAdapter A PrintDocumentAdapter that exposes onLayout and onWrite functions as suspend functions that will automatically invoke the correct callback methods. Constructors \u00b6 Name Summary CoroutinePrintDocumentAdapter [androidJvm] fun CoroutinePrintDocumentAdapter (context: CoroutineContext ) Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int onFinish [androidJvm] Content open override fun onFinish () onLayout [androidJvm] Content abstract suspend fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?) onStart [androidJvm] Content open fun onStart () onWrite [androidJvm] Content abstract suspend fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback ) toString [androidJvm] Content open fun toString (): String Inheritors \u00b6 Name ComposePrintAdapter","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/#coroutineprintdocumentadapter","text":"[androidJvm] abstract class CoroutinePrintDocumentAdapter ( context : CoroutineContext ) : PrintDocumentAdapter A PrintDocumentAdapter that exposes onLayout and onWrite functions as suspend functions that will automatically invoke the correct callback methods.","title":"CoroutinePrintDocumentAdapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/#constructors","text":"Name Summary CoroutinePrintDocumentAdapter [androidJvm] fun CoroutinePrintDocumentAdapter (context: CoroutineContext )","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int onFinish [androidJvm] Content open override fun onFinish () onLayout [androidJvm] Content abstract suspend fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?) onStart [androidJvm] Content open fun onStart () onWrite [androidJvm] Content abstract suspend fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback ) toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/#inheritors","text":"Name ComposePrintAdapter","title":"Inheritors"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/-coroutine-print-document-adapter/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / CoroutinePrintDocumentAdapter / CoroutinePrintDocumentAdapter CoroutinePrintDocumentAdapter \u00b6 [androidJvm] Content fun CoroutinePrintDocumentAdapter (context: CoroutineContext )","title":" coroutine print document adapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/-coroutine-print-document-adapter/#coroutineprintdocumentadapter","text":"[androidJvm] Content fun CoroutinePrintDocumentAdapter (context: CoroutineContext )","title":"CoroutinePrintDocumentAdapter"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-finish/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / CoroutinePrintDocumentAdapter / onFinish onFinish \u00b6 [androidJvm] Content open override fun onFinish ()","title":"On finish"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-finish/#onfinish","text":"[androidJvm] Content open override fun onFinish ()","title":"onFinish"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-layout/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / CoroutinePrintDocumentAdapter / onLayout onLayout \u00b6 [androidJvm] Content abstract suspend fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?)","title":"On layout"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-layout/#onlayout","text":"[androidJvm] Content abstract suspend fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , extras: Bundle ?): PrintDocumentInfo override fun onLayout (oldAttributes: PrintAttributes ?, newAttributes: PrintAttributes , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.LayoutResultCallback , extras: Bundle ?)","title":"onLayout"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-write/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / CoroutinePrintDocumentAdapter / onWrite onWrite \u00b6 [androidJvm] Content abstract suspend fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback )","title":"On write"},{"location":"api/com.zachklipp.richtext.ui.printing/-coroutine-print-document-adapter/on-write/#onwrite","text":"[androidJvm] Content abstract suspend fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor ): Array PageRange > override fun onWrite (pages: Array PageRange >, destination: ParcelFileDescriptor , cancellationSignal: CancellationSignal , callback: PrintDocumentAdapter.WriteResultCallback )","title":"onWrite"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint PageBreakpoint \u00b6 [androidJvm] @Immutable() data class PageBreakpoint ( xAnchorPx : Pair < Int , Int >, yPx : Int , forceBreak : Boolean ) Represents a point in a composition where it is safe to break the page. Parameters \u00b6 androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint. yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset). forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet. Constructors \u00b6 Name Summary PageBreakpoint [androidJvm] fun PageBreakpoint (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean )The start and end x coordinates of the composable that triggered the breakpoint. Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): Pair < Int , Int > component2 [androidJvm] Content operator fun component2 (): Int component3 [androidJvm] Content operator fun component3 (): Boolean copy [androidJvm] Content fun copy (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ): PageBreakpoint equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary forceBreak [androidJvm] val forceBreak : Boolean If false, represents point where the page may break if necessary, but may not. xAnchorPx [androidJvm] val xAnchorPx : Pair < Int , Int >The start and end x coordinates of the composable that triggered the breakpoint. yPx [androidJvm] val yPx : Int The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset).","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/#pagebreakpoint","text":"[androidJvm] @Immutable() data class PageBreakpoint ( xAnchorPx : Pair < Int , Int >, yPx : Int , forceBreak : Boolean ) Represents a point in a composition where it is safe to break the page.","title":"PageBreakpoint"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/#parameters","text":"androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint. yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset). forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/#constructors","text":"Name Summary PageBreakpoint [androidJvm] fun PageBreakpoint (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean )The start and end x coordinates of the composable that triggered the breakpoint.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): Pair < Int , Int > component2 [androidJvm] Content operator fun component2 (): Int component3 [androidJvm] Content operator fun component3 (): Boolean copy [androidJvm] Content fun copy (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ): PageBreakpoint equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/#properties","text":"Name Summary forceBreak [androidJvm] val forceBreak : Boolean If false, represents point where the page may break if necessary, but may not. xAnchorPx [androidJvm] val xAnchorPx : Pair < Int , Int >The start and end x coordinates of the composable that triggered the breakpoint. yPx [androidJvm] val yPx : Int The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset).","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/-page-breakpoint/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / PageBreakpoint PageBreakpoint \u00b6 [androidJvm] Content fun PageBreakpoint (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ) More info Parameters \u00b6 androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint. yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset). forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet.","title":" page breakpoint"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/-page-breakpoint/#pagebreakpoint","text":"[androidJvm] Content fun PageBreakpoint (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ) More info","title":"PageBreakpoint"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/-page-breakpoint/#parameters","text":"androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint. yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset). forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): Pair < Int , Int >","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component1/#component1","text":"[androidJvm] Content operator fun component1 (): Pair < Int , Int >","title":"component1"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): Int","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component2/#component2","text":"[androidJvm] Content operator fun component2 (): Int","title":"component2"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): Boolean","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/component3/#component3","text":"[androidJvm] Content operator fun component3 (): Boolean","title":"component3"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / copy copy \u00b6 [androidJvm] Content fun copy (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ): PageBreakpoint","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/copy/#copy","text":"[androidJvm] Content fun copy (xAnchorPx: Pair < Int , Int >, yPx: Int , forceBreak: Boolean ): PageBreakpoint","title":"copy"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/force-break/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / forceBreak forceBreak \u00b6 [androidJvm] Content val forceBreak : Boolean More info Parameters \u00b6 androidJvm Name Summary forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet.","title":"Force break"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/force-break/#forcebreak","text":"[androidJvm] Content val forceBreak : Boolean More info","title":"forceBreak"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/force-break/#parameters","text":"androidJvm Name Summary forceBreak If false, represents point where the page may break if necessary, but may not. If true, represents a point where the page will always break. Note this is not actually implemented yet.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/x-anchor-px/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / xAnchorPx xAnchorPx \u00b6 [androidJvm] Content val xAnchorPx : Pair < Int , Int > More info Parameters \u00b6 androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint.","title":"X anchor px"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/x-anchor-px/#xanchorpx","text":"[androidJvm] Content val xAnchorPx : Pair < Int , Int > More info","title":"xAnchorPx"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/x-anchor-px/#parameters","text":"androidJvm Name Summary xAnchorPx The start and end x coordinates of the composable that triggered the breakpoint.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/y-px/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageBreakpoint / yPx yPx \u00b6 [androidJvm] Content val yPx : Int More info Parameters \u00b6 androidJvm Name Summary yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset).","title":"Y px"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/y-px/#ypx","text":"[androidJvm] Content val yPx : Int More info","title":"yPx"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-breakpoint/y-px/#parameters","text":"androidJvm Name Summary yPx The y coordinate of the breakpoint, relative to the Paged composable (not affected by page offset).","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageLayoutResult PageLayoutResult \u00b6 [androidJvm] @Immutable() interface PageLayoutResult After the first frame of a Paged is committed, the breakpoints and page offsets are calculated and passed to a callback via an instance of this interface. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int nextPageOffsetPx [androidJvm] Content abstract fun nextPageOffsetPx (currentPageOffsetPx: Int ): Int ? More info Given the offset of the start of the current page, returns the y offset in pixels of the start of the next page. toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary breakpoints [androidJvm] abstract val breakpoints : List < PageBreakpoint > pageOffsetsPx [androidJvm] abstract val pageOffsetsPx : List < Int >The pixel offsets of each page, for passing to Paged 's pageOffsetPx parameter. pageSizePx [androidJvm] abstract val pageSizePx : IntSizePage size in pixels.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/#pagelayoutresult","text":"[androidJvm] @Immutable() interface PageLayoutResult After the first frame of a Paged is committed, the breakpoints and page offsets are calculated and passed to a callback via an instance of this interface.","title":"PageLayoutResult"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int nextPageOffsetPx [androidJvm] Content abstract fun nextPageOffsetPx (currentPageOffsetPx: Int ): Int ? More info Given the offset of the start of the current page, returns the y offset in pixels of the start of the next page. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/#properties","text":"Name Summary breakpoints [androidJvm] abstract val breakpoints : List < PageBreakpoint > pageOffsetsPx [androidJvm] abstract val pageOffsetsPx : List < Int >The pixel offsets of each page, for passing to Paged 's pageOffsetPx parameter. pageSizePx [androidJvm] abstract val pageSizePx : IntSizePage size in pixels.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/breakpoints/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageLayoutResult / breakpoints breakpoints \u00b6 [androidJvm] Content abstract val breakpoints : List < PageBreakpoint >","title":"Breakpoints"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/breakpoints/#breakpoints","text":"[androidJvm] Content abstract val breakpoints : List < PageBreakpoint >","title":"breakpoints"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/next-page-offset-px/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageLayoutResult / nextPageOffsetPx nextPageOffsetPx \u00b6 [androidJvm] Content abstract fun nextPageOffsetPx (currentPageOffsetPx: Int ): Int ? More info Given the offset of the start of the current page, returns the y offset in pixels of the start of the next page. In other words, the offset of the last breakpoint that would fit on the current page but get clipped.","title":"Next page offset px"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/next-page-offset-px/#nextpageoffsetpx","text":"[androidJvm] Content abstract fun nextPageOffsetPx (currentPageOffsetPx: Int ): Int ? More info Given the offset of the start of the current page, returns the y offset in pixels of the start of the next page. In other words, the offset of the last breakpoint that would fit on the current page but get clipped.","title":"nextPageOffsetPx"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/page-offsets-px/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageLayoutResult / pageOffsetsPx pageOffsetsPx \u00b6 [androidJvm] Content abstract val pageOffsetsPx : List < Int > More info The pixel offsets of each page, for passing to Paged 's pageOffsetPx parameter. The last offset will be the end of the last page.","title":"Page offsets px"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/page-offsets-px/#pageoffsetspx","text":"[androidJvm] Content abstract val pageOffsetsPx : List < Int > More info The pixel offsets of each page, for passing to Paged 's pageOffsetPx parameter. The last offset will be the end of the last page.","title":"pageOffsetsPx"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/page-size-px/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PageLayoutResult / pageSizePx pageSizePx \u00b6 [androidJvm] Content abstract val pageSizePx : IntSize More info Page size in pixels.","title":"Page size px"},{"location":"api/com.zachklipp.richtext.ui.printing/-page-layout-result/page-size-px/#pagesizepx","text":"[androidJvm] Content abstract val pageSizePx : IntSize More info Page size in pixels.","title":"pageSizePx"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PrintableController PrintableController \u00b6 [androidJvm] abstract class PrintableController Provides the print method to trigger printing Printable composables. Create one by calling rememberPrintableController . Constructors \u00b6 Name Summary PrintableController [androidJvm] fun PrintableController () Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int print [androidJvm] Content fun print (documentName: String , jobName: String = documentName) More info Asks the PrintManager to start printing the Printable composable. toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/#printablecontroller","text":"[androidJvm] abstract class PrintableController Provides the print method to trigger printing Printable composables. Create one by calling rememberPrintableController .","title":"PrintableController"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/#constructors","text":"Name Summary PrintableController [androidJvm] fun PrintableController ()","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int print [androidJvm] Content fun print (documentName: String , jobName: String = documentName) More info Asks the PrintManager to start printing the Printable composable. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/-printable-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PrintableController / PrintableController PrintableController \u00b6 [androidJvm] Content fun PrintableController ()","title":" printable controller"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/-printable-controller/#printablecontroller","text":"[androidJvm] Content fun PrintableController ()","title":"PrintableController"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/print/","text":"// compose-richtext / com.zachklipp.richtext.ui.printing / PrintableController / print print \u00b6 [androidJvm] Content fun print (documentName: String , jobName: String = documentName) More info Asks the PrintManager to start printing the Printable composable.","title":"Print"},{"location":"api/com.zachklipp.richtext.ui.printing/-printable-controller/print/#print","text":"[androidJvm] Content fun print (documentName: String , jobName: String = documentName) More info Asks the PrintManager to start printing the Printable composable.","title":"print"},{"location":"api/com.zachklipp.richtext.ui.slideshow/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow Package com.zachklipp.richtext.ui.slideshow \u00b6 Types \u00b6 Name Summary NavigableContentScope [androidJvm] Content interface NavigableContentScope : SlideScope More info Receiver type for NavigableContentContainer children. NavigationInterceptor [androidJvm] Content typealias NavigationInterceptor = (forward: Boolean ) -> Boolean SlideScope [androidJvm] Content interface SlideScope More info Receiver for slide composables passed to Slideshow that provides some context about the current slide, as well as functions for controlling navigation. SlideshowController [androidJvm] Content class SlideshowController SlideshowTheme [androidJvm] Content @Immutable() data class SlideshowTheme ( contentColor : Color, backgroundColor : Color, baseTextStyle : TextStyle, titleStyle : TextStyle, subtitleStyle : TextStyle, headerStyle : TextStyle, footerStyle : TextStyle, gap : Dp, aspectRatio : Float ) More info Defines the visual styling for a Slideshow . Functions \u00b6 Name Summary BodySlide [androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. NavigableContentContainer [androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. rememberSlideshowController [androidJvm] Content @Composable() fun rememberSlideshowController (): SlideshowController SlideDivider [androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color. SlideNumberFooter [androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent. Slideshow [androidJvm] Content @Composable() fun Slideshow (vararg slides: SlideScope .() -> Unit , controller: SlideshowController = rememberSlideshowController(), theme: SlideshowTheme = SlideshowTheme()) More info A slideshow consisting of a sequence of slides which can be navigated through by tapping on them. TitleSlide [androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it. Properties \u00b6 Name Summary SlideshowThemeAmbient [androidJvm] val SlideshowThemeAmbient : ProvidableCompositionLocal< SlideshowTheme >","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.slideshow/#package-comzachklipprichtextuislideshow","text":"","title":"Package com.zachklipp.richtext.ui.slideshow"},{"location":"api/com.zachklipp.richtext.ui.slideshow/#types","text":"Name Summary NavigableContentScope [androidJvm] Content interface NavigableContentScope : SlideScope More info Receiver type for NavigableContentContainer children. NavigationInterceptor [androidJvm] Content typealias NavigationInterceptor = (forward: Boolean ) -> Boolean SlideScope [androidJvm] Content interface SlideScope More info Receiver for slide composables passed to Slideshow that provides some context about the current slide, as well as functions for controlling navigation. SlideshowController [androidJvm] Content class SlideshowController SlideshowTheme [androidJvm] Content @Immutable() data class SlideshowTheme ( contentColor : Color, backgroundColor : Color, baseTextStyle : TextStyle, titleStyle : TextStyle, subtitleStyle : TextStyle, headerStyle : TextStyle, footerStyle : TextStyle, gap : Dp, aspectRatio : Float ) More info Defines the visual styling for a Slideshow .","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.slideshow/#functions","text":"Name Summary BodySlide [androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. NavigableContentContainer [androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. rememberSlideshowController [androidJvm] Content @Composable() fun rememberSlideshowController (): SlideshowController SlideDivider [androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color. SlideNumberFooter [androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent. Slideshow [androidJvm] Content @Composable() fun Slideshow (vararg slides: SlideScope .() -> Unit , controller: SlideshowController = rememberSlideshowController(), theme: SlideshowTheme = SlideshowTheme()) More info A slideshow consisting of a sequence of slides which can be navigated through by tapping on them. TitleSlide [androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it.","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/#properties","text":"Name Summary SlideshowThemeAmbient [androidJvm] val SlideshowThemeAmbient : ProvidableCompositionLocal< SlideshowTheme >","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-body-slide/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / BodySlide BodySlide \u00b6 [androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. All children are start-aligned. See SlideDivider and SlideNumberFooter .","title":" body slide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-body-slide/#bodyslide","text":"[androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. All children are start-aligned. See SlideDivider and SlideNumberFooter .","title":"BodySlide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-container/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / NavigableContentContainer NavigableContentContainer \u00b6 [androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. The children of this content receive a NavigableContentScope , which can be used to define pieces of content which should be gradually revealed. Every occurrence of NavigableContentScope.NavigableContent will be initially invoked with visible=false, and then gradually invoked with visible=true as the slideshow is advanced. This composable works really well with androidx.compose.animation.AnimatedVisibility, which takes a boolean visible flag and optional enter/exit animations.","title":" navigable content container"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-container/#navigablecontentcontainer","text":"[androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. The children of this content receive a NavigableContentScope , which can be used to define pieces of content which should be gradually revealed. Every occurrence of NavigableContentScope.NavigableContent will be initially invoked with visible=false, and then gradually invoked with visible=true as the slideshow is advanced. This composable works really well with androidx.compose.animation.AnimatedVisibility, which takes a boolean visible flag and optional enter/exit animations.","title":"NavigableContentContainer"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-divider/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideDivider SlideDivider \u00b6 [androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color.","title":" slide divider"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-divider/#slidedivider","text":"[androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color.","title":"SlideDivider"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-number-footer/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideNumberFooter SlideNumberFooter \u00b6 [androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent.","title":" slide number footer"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-number-footer/#slidenumberfooter","text":"[androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent.","title":"SlideNumberFooter"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme-ambient/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowThemeAmbient SlideshowThemeAmbient \u00b6 [androidJvm] Content val SlideshowThemeAmbient : ProvidableCompositionLocal< SlideshowTheme >","title":" slideshow theme ambient"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme-ambient/#slideshowthemeambient","text":"[androidJvm] Content val SlideshowThemeAmbient : ProvidableCompositionLocal< SlideshowTheme >","title":"SlideshowThemeAmbient"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / Slideshow Slideshow \u00b6 [androidJvm] Content @Composable() fun Slideshow (vararg slides: SlideScope .() -> Unit , controller: SlideshowController = rememberSlideshowController(), theme: SlideshowTheme = SlideshowTheme()) More info A slideshow consisting of a sequence of slides which can be navigated through by tapping on them. Each slide is defined as a composable function with a SlideScope receiver. The SlideScope can be used to get information about the current slide and control navigation. A number of scaffold slide composables are provided to create common slide layouts, which can be customized through the SlideshowTheme . These include: [TitleSlide](-title-slide.md) [BodySlide](-body-slide.md) There are other helpers as well: [SlideDivider](-slide-divider.md) [NavigableContentContainer](-navigable-content-container.md)","title":" slideshow"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow/#slideshow","text":"[androidJvm] Content @Composable() fun Slideshow (vararg slides: SlideScope .() -> Unit , controller: SlideshowController = rememberSlideshowController(), theme: SlideshowTheme = SlideshowTheme()) More info A slideshow consisting of a sequence of slides which can be navigated through by tapping on them. Each slide is defined as a composable function with a SlideScope receiver. The SlideScope can be used to get information about the current slide and control navigation. A number of scaffold slide composables are provided to create common slide layouts, which can be customized through the SlideshowTheme . These include: [TitleSlide](-title-slide.md) [BodySlide](-body-slide.md) There are other helpers as well: [SlideDivider](-slide-divider.md) [NavigableContentContainer](-navigable-content-container.md)","title":"Slideshow"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-title-slide/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / TitleSlide TitleSlide \u00b6 [androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it.","title":" title slide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-title-slide/#titleslide","text":"[androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it.","title":"TitleSlide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/remember-slideshow-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / rememberSlideshowController rememberSlideshowController \u00b6 [androidJvm] Content @Composable() fun rememberSlideshowController (): SlideshowController","title":"Remember slideshow controller"},{"location":"api/com.zachklipp.richtext.ui.slideshow/remember-slideshow-controller/#rememberslideshowcontroller","text":"[androidJvm] Content @Composable() fun rememberSlideshowController (): SlideshowController","title":"rememberSlideshowController"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / NavigableContentScope NavigableContentScope \u00b6 [androidJvm] interface NavigableContentScope : SlideScope Receiver type for NavigableContentContainer children. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int interceptNavigation [androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. NavigableContent [androidJvm] Content @Composable() abstract fun NavigableContent (children: (visible: State< Boolean >) -> Unit ) More info Defines a composable which will be initially passed visible=false, and then invoked with visible=true as the slideshow is advanced. toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary navigatedForward [androidJvm] abstract val navigatedForward : Boolean If true, this slide was shown via forward navigation, coming from the previous slide. slideNumber [androidJvm] abstract val slideNumber : Int The index of the current slide in the slideshow.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/#navigablecontentscope","text":"[androidJvm] interface NavigableContentScope : SlideScope Receiver type for NavigableContentContainer children.","title":"NavigableContentScope"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int interceptNavigation [androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. NavigableContent [androidJvm] Content @Composable() abstract fun NavigableContent (children: (visible: State< Boolean >) -> Unit ) More info Defines a composable which will be initially passed visible=false, and then invoked with visible=true as the slideshow is advanced. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/#properties","text":"Name Summary navigatedForward [androidJvm] abstract val navigatedForward : Boolean If true, this slide was shown via forward navigation, coming from the previous slide. slideNumber [androidJvm] abstract val slideNumber : Int The index of the current slide in the slideshow.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/-navigable-content/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / NavigableContentScope / NavigableContent NavigableContent \u00b6 [androidJvm] Content @Composable() abstract fun NavigableContent (children: (visible: State< Boolean >) -> Unit ) More info Defines a composable which will be initially passed visible=false, and then invoked with visible=true as the slideshow is advanced. A State object is passed, instead of passing the boolean directly, to prevent unnecessary recomposition if the value is not used in the immediate scope.","title":" navigable content"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/-navigable-content/#navigablecontent","text":"[androidJvm] Content @Composable() abstract fun NavigableContent (children: (visible: State< Boolean >) -> Unit ) More info Defines a composable which will be initially passed visible=false, and then invoked with visible=true as the slideshow is advanced. A State object is passed, instead of passing the boolean directly, to prevent unnecessary recomposition if the value is not used in the immediate scope.","title":"NavigableContent"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/navigated-forward/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / NavigableContentScope / navigatedForward navigatedForward \u00b6 [androidJvm] Content abstract val navigatedForward : Boolean More info If true, this slide was shown via forward navigation, coming from the previous slide.","title":"Navigated forward"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/navigated-forward/#navigatedforward","text":"[androidJvm] Content abstract val navigatedForward : Boolean More info If true, this slide was shown via forward navigation, coming from the previous slide.","title":"navigatedForward"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/slide-number/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / NavigableContentScope / slideNumber slideNumber \u00b6 [androidJvm] Content abstract val slideNumber : Int More info The index of the current slide in the slideshow.","title":"Slide number"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-navigable-content-scope/slide-number/#slidenumber","text":"[androidJvm] Content abstract val slideNumber : Int More info The index of the current slide in the slideshow.","title":"slideNumber"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideScope SlideScope \u00b6 [androidJvm] interface SlideScope Receiver for slide composables passed to Slideshow that provides some context about the current slide, as well as functions for controlling navigation. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int interceptNavigation [androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary navigatedForward [androidJvm] abstract val navigatedForward : Boolean If true, this slide was shown via forward navigation, coming from the previous slide. slideNumber [androidJvm] abstract val slideNumber : Int The index of the current slide in the slideshow. Inheritors \u00b6 Name NavigableContentScope Extensions \u00b6 Name Summary BodySlide [androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. NavigableContentContainer [androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. SlideDivider [androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color. SlideNumberFooter [androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent. TitleSlide [androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/#slidescope","text":"[androidJvm] interface SlideScope Receiver for slide composables passed to Slideshow that provides some context about the current slide, as well as functions for controlling navigation.","title":"SlideScope"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int interceptNavigation [androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/#properties","text":"Name Summary navigatedForward [androidJvm] abstract val navigatedForward : Boolean If true, this slide was shown via forward navigation, coming from the previous slide. slideNumber [androidJvm] abstract val slideNumber : Int The index of the current slide in the slideshow.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/#inheritors","text":"Name NavigableContentScope","title":"Inheritors"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/#extensions","text":"Name Summary BodySlide [androidJvm] Content @Composable() fun SlideScope . BodySlide (header: () -> Unit , body: () -> Unit , footer: () -> Unit = { SlideNumberFooter() }) More info A composable to define a Slideshow slide which displays a large header at the top of the slide, an optional footer at the bottom, and some content in the middle. NavigableContentContainer [androidJvm] Content @Composable() fun SlideScope . NavigableContentContainer (children: NavigableContentScope .() -> Unit ) More info Wrapper for Slideshow slides that want to initially display a subset of their content, and eventually reveal more content as the slideshow is advanced. SlideDivider [androidJvm] Content @Composable() fun SlideScope . SlideDivider () More info A simple horizontal divider line which uses the SlideshowTheme content color. SlideNumberFooter [androidJvm] Content @Composable() fun SlideScope . SlideNumberFooter () More info A text composable which displays the current slide number from the SlideScope , right-aligned in its parent. TitleSlide [androidJvm] Content @Composable() fun SlideScope . TitleSlide (title: () -> Unit , subtitle: () -> Unit ? = null) More info A composable to define a Slideshow slide that shows a large, bold title in the center of the slide with an optional subtitle below it.","title":"Extensions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/intercept-navigation/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideScope / interceptNavigation interceptNavigation \u00b6 [androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. If the callback returns true, the slideshow will not navigate. If it returns false, the next interceptor will have a chance to handle it, or if there are no other interceptors then the slideshow will navigate between slides.","title":"Intercept navigation"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/intercept-navigation/#interceptnavigation","text":"[androidJvm] Content @Composable() abstract fun interceptNavigation (handler: NavigationInterceptor ) More info Register a callback to be invoked when navigation is requested from this slide. If the callback returns true, the slideshow will not navigate. If it returns false, the next interceptor will have a chance to handle it, or if there are no other interceptors then the slideshow will navigate between slides.","title":"interceptNavigation"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/navigated-forward/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideScope / navigatedForward navigatedForward \u00b6 [androidJvm] Content abstract val navigatedForward : Boolean More info If true, this slide was shown via forward navigation, coming from the previous slide.","title":"Navigated forward"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/navigated-forward/#navigatedforward","text":"[androidJvm] Content abstract val navigatedForward : Boolean More info If true, this slide was shown via forward navigation, coming from the previous slide.","title":"navigatedForward"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/slide-number/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideScope / slideNumber slideNumber \u00b6 [androidJvm] Content abstract val slideNumber : Int More info The index of the current slide in the slideshow.","title":"Slide number"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slide-scope/slide-number/#slidenumber","text":"[androidJvm] Content abstract val slideNumber : Int More info The index of the current slide in the slideshow.","title":"slideNumber"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowController SlideshowController \u00b6 [androidJvm] class SlideshowController Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary currentSlide [androidJvm] var currentSlide : Int showingScrubber [androidJvm] var showingScrubber : Boolean","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/#slideshowcontroller","text":"[androidJvm] class SlideshowController","title":"SlideshowController"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/#properties","text":"Name Summary currentSlide [androidJvm] var currentSlide : Int showingScrubber [androidJvm] var showingScrubber : Boolean","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/-slideshow-controller/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowController / SlideshowController SlideshowController \u00b6 [androidJvm] Content fun SlideshowController ()","title":" slideshow controller"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/-slideshow-controller/#slideshowcontroller","text":"[androidJvm] Content fun SlideshowController ()","title":"SlideshowController"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/current-slide/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowController / currentSlide currentSlide \u00b6 [androidJvm] Content var currentSlide : Int","title":"Current slide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/current-slide/#currentslide","text":"[androidJvm] Content var currentSlide : Int","title":"currentSlide"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/showing-scrubber/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowController / showingScrubber showingScrubber \u00b6 [androidJvm] Content var showingScrubber : Boolean","title":"Showing scrubber"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-controller/showing-scrubber/#showingscrubber","text":"[androidJvm] Content var showingScrubber : Boolean","title":"showingScrubber"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme SlideshowTheme \u00b6 [androidJvm] @Immutable() data class SlideshowTheme ( contentColor : Color, backgroundColor : Color, baseTextStyle : TextStyle, titleStyle : TextStyle, subtitleStyle : TextStyle, headerStyle : TextStyle, footerStyle : TextStyle, gap : Dp, aspectRatio : Float ) Defines the visual styling for a Slideshow . Parameters \u00b6 androidJvm Name Summary contentColor Default color used for text and SlideDivider . backgroundColor Color used as the background for slides. baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots. titleStyle Default TextStyle used for TitleSlide titles. subtitleStyle Default TextStyle used for TitleSlide subtitles. headerStyle Default TextStyle used for BodySlide headers. footerStyle Default TextStyle used for BodySlide footers. gap Default margins used for BodySlide s and spacing between header, body, and footer. aspectRatio The aspect ratio for the entire slideshow. Constructors \u00b6 Name Summary SlideshowTheme [androidJvm] fun SlideshowTheme (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f)Default color used for text and SlideDivider . Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): Color component2 [androidJvm] Content operator fun component2 (): Color component3 [androidJvm] Content operator fun component3 (): TextStyle component4 [androidJvm] Content operator fun component4 (): TextStyle component5 [androidJvm] Content operator fun component5 (): TextStyle component6 [androidJvm] Content operator fun component6 (): TextStyle component7 [androidJvm] Content operator fun component7 (): TextStyle component8 [androidJvm] Content operator fun component8 (): Dp component9 [androidJvm] Content operator fun component9 (): Float copy [androidJvm] Content fun copy (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f): SlideshowTheme equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary aspectRatio [androidJvm] val aspectRatio : Float The aspect ratio for the entire slideshow. backgroundColor [androidJvm] val backgroundColor : ColorColor used as the background for slides. baseTextStyle [androidJvm] val baseTextStyle : TextStyleDefault TextStyle used for all slide content. contentColor [androidJvm] val contentColor : ColorDefault color used for text and SlideDivider . footerStyle [androidJvm] val footerStyle : TextStyleDefault TextStyle used for BodySlide footers. gap [androidJvm] val gap : DpDefault margins used for BodySlide s and spacing between header, body, and footer. headerStyle [androidJvm] val headerStyle : TextStyleDefault TextStyle used for BodySlide headers. subtitleStyle [androidJvm] val subtitleStyle : TextStyleDefault TextStyle used for TitleSlide subtitles. titleStyle [androidJvm] val titleStyle : TextStyleDefault TextStyle used for TitleSlide titles.","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/#slideshowtheme","text":"[androidJvm] @Immutable() data class SlideshowTheme ( contentColor : Color, backgroundColor : Color, baseTextStyle : TextStyle, titleStyle : TextStyle, subtitleStyle : TextStyle, headerStyle : TextStyle, footerStyle : TextStyle, gap : Dp, aspectRatio : Float ) Defines the visual styling for a Slideshow .","title":"SlideshowTheme"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/#parameters","text":"androidJvm Name Summary contentColor Default color used for text and SlideDivider . backgroundColor Color used as the background for slides. baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots. titleStyle Default TextStyle used for TitleSlide titles. subtitleStyle Default TextStyle used for TitleSlide subtitles. headerStyle Default TextStyle used for BodySlide headers. footerStyle Default TextStyle used for BodySlide footers. gap Default margins used for BodySlide s and spacing between header, body, and footer. aspectRatio The aspect ratio for the entire slideshow.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/#constructors","text":"Name Summary SlideshowTheme [androidJvm] fun SlideshowTheme (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f)Default color used for text and SlideDivider .","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): Color component2 [androidJvm] Content operator fun component2 (): Color component3 [androidJvm] Content operator fun component3 (): TextStyle component4 [androidJvm] Content operator fun component4 (): TextStyle component5 [androidJvm] Content operator fun component5 (): TextStyle component6 [androidJvm] Content operator fun component6 (): TextStyle component7 [androidJvm] Content operator fun component7 (): TextStyle component8 [androidJvm] Content operator fun component8 (): Dp component9 [androidJvm] Content operator fun component9 (): Float copy [androidJvm] Content fun copy (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f): SlideshowTheme equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/#properties","text":"Name Summary aspectRatio [androidJvm] val aspectRatio : Float The aspect ratio for the entire slideshow. backgroundColor [androidJvm] val backgroundColor : ColorColor used as the background for slides. baseTextStyle [androidJvm] val baseTextStyle : TextStyleDefault TextStyle used for all slide content. contentColor [androidJvm] val contentColor : ColorDefault color used for text and SlideDivider . footerStyle [androidJvm] val footerStyle : TextStyleDefault TextStyle used for BodySlide footers. gap [androidJvm] val gap : DpDefault margins used for BodySlide s and spacing between header, body, and footer. headerStyle [androidJvm] val headerStyle : TextStyleDefault TextStyle used for BodySlide headers. subtitleStyle [androidJvm] val subtitleStyle : TextStyleDefault TextStyle used for TitleSlide subtitles. titleStyle [androidJvm] val titleStyle : TextStyleDefault TextStyle used for TitleSlide titles.","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/-slideshow-theme/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / SlideshowTheme SlideshowTheme \u00b6 [androidJvm] Content fun SlideshowTheme (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f) More info Parameters \u00b6 androidJvm Name Summary contentColor Default color used for text and SlideDivider . backgroundColor Color used as the background for slides. baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots. titleStyle Default TextStyle used for TitleSlide titles. subtitleStyle Default TextStyle used for TitleSlide subtitles. headerStyle Default TextStyle used for BodySlide headers. footerStyle Default TextStyle used for BodySlide footers. gap Default margins used for BodySlide s and spacing between header, body, and footer. aspectRatio The aspect ratio for the entire slideshow.","title":" slideshow theme"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/-slideshow-theme/#slideshowtheme","text":"[androidJvm] Content fun SlideshowTheme (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f) More info","title":"SlideshowTheme"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/-slideshow-theme/#parameters","text":"androidJvm Name Summary contentColor Default color used for text and SlideDivider . backgroundColor Color used as the background for slides. baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots. titleStyle Default TextStyle used for TitleSlide titles. subtitleStyle Default TextStyle used for TitleSlide subtitles. headerStyle Default TextStyle used for BodySlide headers. footerStyle Default TextStyle used for BodySlide footers. gap Default margins used for BodySlide s and spacing between header, body, and footer. aspectRatio The aspect ratio for the entire slideshow.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/aspect-ratio/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / aspectRatio aspectRatio \u00b6 [androidJvm] Content val aspectRatio : Float More info Parameters \u00b6 androidJvm Name Summary aspectRatio The aspect ratio for the entire slideshow.","title":"Aspect ratio"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/aspect-ratio/#aspectratio","text":"[androidJvm] Content val aspectRatio : Float More info","title":"aspectRatio"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/aspect-ratio/#parameters","text":"androidJvm Name Summary aspectRatio The aspect ratio for the entire slideshow.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/background-color/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / backgroundColor backgroundColor \u00b6 [androidJvm] Content val backgroundColor : Color More info Parameters \u00b6 androidJvm Name Summary backgroundColor Color used as the background for slides.","title":"Background color"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/background-color/#backgroundcolor","text":"[androidJvm] Content val backgroundColor : Color More info","title":"backgroundColor"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/background-color/#parameters","text":"androidJvm Name Summary backgroundColor Color used as the background for slides.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/base-text-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / baseTextStyle baseTextStyle \u00b6 [androidJvm] Content val baseTextStyle : TextStyle More info Parameters \u00b6 androidJvm Name Summary baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots.","title":"Base text style"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/base-text-style/#basetextstyle","text":"[androidJvm] Content val baseTextStyle : TextStyle More info","title":"baseTextStyle"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/base-text-style/#parameters","text":"androidJvm Name Summary baseTextStyle Default TextStyle used for all slide content. Some scaffolds use other styles from the theme for certain slots.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): Color","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component1/#component1","text":"[androidJvm] Content operator fun component1 (): Color","title":"component1"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): Color","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component2/#component2","text":"[androidJvm] Content operator fun component2 (): Color","title":"component2"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): TextStyle","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component3/#component3","text":"[androidJvm] Content operator fun component3 (): TextStyle","title":"component3"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): TextStyle","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component4/#component4","text":"[androidJvm] Content operator fun component4 (): TextStyle","title":"component4"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component5/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component5 component5 \u00b6 [androidJvm] Content operator fun component5 (): TextStyle","title":"Component5"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component5/#component5","text":"[androidJvm] Content operator fun component5 (): TextStyle","title":"component5"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component6/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component6 component6 \u00b6 [androidJvm] Content operator fun component6 (): TextStyle","title":"Component6"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component6/#component6","text":"[androidJvm] Content operator fun component6 (): TextStyle","title":"component6"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component7/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component7 component7 \u00b6 [androidJvm] Content operator fun component7 (): TextStyle","title":"Component7"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component7/#component7","text":"[androidJvm] Content operator fun component7 (): TextStyle","title":"component7"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component8/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component8 component8 \u00b6 [androidJvm] Content operator fun component8 (): Dp","title":"Component8"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component8/#component8","text":"[androidJvm] Content operator fun component8 (): Dp","title":"component8"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component9/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / component9 component9 \u00b6 [androidJvm] Content operator fun component9 (): Float","title":"Component9"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/component9/#component9","text":"[androidJvm] Content operator fun component9 (): Float","title":"component9"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/content-color/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / contentColor contentColor \u00b6 [androidJvm] Content val contentColor : Color More info Parameters \u00b6 androidJvm Name Summary contentColor Default color used for text and SlideDivider .","title":"Content color"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/content-color/#contentcolor","text":"[androidJvm] Content val contentColor : Color More info","title":"contentColor"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/content-color/#parameters","text":"androidJvm Name Summary contentColor Default color used for text and SlideDivider .","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / copy copy \u00b6 [androidJvm] Content fun copy (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f): SlideshowTheme","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/copy/#copy","text":"[androidJvm] Content fun copy (contentColor: Color = Color.White, backgroundColor: Color = Color.DarkGray, baseTextStyle: TextStyle = TextStyle(fontSize = 18.sp), titleStyle: TextStyle = TextStyle( fontSize = 48.sp, textAlign = Center, fontWeight = FontWeight.Bold ), subtitleStyle: TextStyle = TextStyle( fontSize = 36.sp, textAlign = Center ), headerStyle: TextStyle = TextStyle(fontSize = 28.sp), footerStyle: TextStyle = TextStyle(fontSize = 12.sp), gap: Dp = 16.dp, aspectRatio: Float = 16 / 9f): SlideshowTheme","title":"copy"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/footer-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / footerStyle footerStyle \u00b6 [androidJvm] Content val footerStyle : TextStyle More info Parameters \u00b6 androidJvm Name Summary footerStyle Default TextStyle used for BodySlide footers.","title":"Footer style"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/footer-style/#footerstyle","text":"[androidJvm] Content val footerStyle : TextStyle More info","title":"footerStyle"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/footer-style/#parameters","text":"androidJvm Name Summary footerStyle Default TextStyle used for BodySlide footers.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/gap/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / gap gap \u00b6 [androidJvm] Content val gap : Dp More info Parameters \u00b6 androidJvm Name Summary gap Default margins used for BodySlide s and spacing between header, body, and footer.","title":"Gap"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/gap/#gap","text":"[androidJvm] Content val gap : Dp More info","title":"gap"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/gap/#parameters","text":"androidJvm Name Summary gap Default margins used for BodySlide s and spacing between header, body, and footer.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/header-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / headerStyle headerStyle \u00b6 [androidJvm] Content val headerStyle : TextStyle More info Parameters \u00b6 androidJvm Name Summary headerStyle Default TextStyle used for BodySlide headers.","title":"Header style"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/header-style/#headerstyle","text":"[androidJvm] Content val headerStyle : TextStyle More info","title":"headerStyle"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/header-style/#parameters","text":"androidJvm Name Summary headerStyle Default TextStyle used for BodySlide headers.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/subtitle-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / subtitleStyle subtitleStyle \u00b6 [androidJvm] Content val subtitleStyle : TextStyle More info Parameters \u00b6 androidJvm Name Summary subtitleStyle Default TextStyle used for TitleSlide subtitles.","title":"Subtitle style"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/subtitle-style/#subtitlestyle","text":"[androidJvm] Content val subtitleStyle : TextStyle More info","title":"subtitleStyle"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/subtitle-style/#parameters","text":"androidJvm Name Summary subtitleStyle Default TextStyle used for TitleSlide subtitles.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/title-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.slideshow / SlideshowTheme / titleStyle titleStyle \u00b6 [androidJvm] Content val titleStyle : TextStyle More info Parameters \u00b6 androidJvm Name Summary titleStyle Default TextStyle used for TitleSlide titles.","title":"Title style"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/title-style/#titlestyle","text":"[androidJvm] Content val titleStyle : TextStyle More info","title":"titleStyle"},{"location":"api/com.zachklipp.richtext.ui.slideshow/-slideshow-theme/title-style/#parameters","text":"androidJvm Name Summary titleStyle Default TextStyle used for TitleSlide titles.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.string/","text":"// compose-richtext / com.zachklipp.richtext.ui.string Package com.zachklipp.richtext.ui.string \u00b6 Types \u00b6 Name Summary InlineContent [androidJvm] Content class InlineContent ( initialSize : Density.() -> IntSize?, content : Density.(alternateText: String ) -> Unit ) More info A Composable that can be embedded inline in a RichTextString by passing to RichTextString.Builder.appendInlineContent . RichTextString [androidJvm] Content @Immutable() data class RichTextString More info A special type of AnnotatedString that is formatted using higher-level directives that are configured using a RichTextStringStyle . RichTextStringStyle [androidJvm] Content @Immutable() data class RichTextStringStyle ( boldStyle : SpanStyle?, italicStyle : SpanStyle?, underlineStyle : SpanStyle?, strikethroughStyle : SpanStyle?, subscriptStyle : SpanStyle?, superscriptStyle : SpanStyle?, codeStyle : SpanStyle?, linkStyle : SpanStyle?) More info Defines the SpanStyles that are used for various RichTextString formatting directives. Functions \u00b6 Name Summary richTextString [androidJvm] Content inline fun richTextString (builder: RichTextString.Builder .() -> Unit ): RichTextString More info Convenience function for creating a RichTextString using a Builder . Text [androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString . withFormat [androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/#package-comzachklipprichtextuistring","text":"","title":"Package com.zachklipp.richtext.ui.string"},{"location":"api/com.zachklipp.richtext.ui.string/#types","text":"Name Summary InlineContent [androidJvm] Content class InlineContent ( initialSize : Density.() -> IntSize?, content : Density.(alternateText: String ) -> Unit ) More info A Composable that can be embedded inline in a RichTextString by passing to RichTextString.Builder.appendInlineContent . RichTextString [androidJvm] Content @Immutable() data class RichTextString More info A special type of AnnotatedString that is formatted using higher-level directives that are configured using a RichTextStringStyle . RichTextStringStyle [androidJvm] Content @Immutable() data class RichTextStringStyle ( boldStyle : SpanStyle?, italicStyle : SpanStyle?, underlineStyle : SpanStyle?, strikethroughStyle : SpanStyle?, subscriptStyle : SpanStyle?, superscriptStyle : SpanStyle?, codeStyle : SpanStyle?, linkStyle : SpanStyle?) More info Defines the SpanStyles that are used for various RichTextString formatting directives.","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.string/#functions","text":"Name Summary richTextString [androidJvm] Content inline fun richTextString (builder: RichTextString.Builder .() -> Unit ): RichTextString More info Convenience function for creating a RichTextString using a Builder . Text [androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString . withFormat [androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-text/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / Text Text \u00b6 [androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString . Samples \u00b6 [androidJvm] com.zachklipp.richtext.ui.string.TextPreview","title":" text"},{"location":"api/com.zachklipp.richtext.ui.string/-text/#text","text":"[androidJvm] Content @Composable() fun RichTextScope . Text (text: RichTextString , modifier: Modifier = Modifier, onTextLayout: (TextLayoutResult) -> Unit = {}) More info Renders a RichTextString as created with richTextString .","title":"Text"},{"location":"api/com.zachklipp.richtext.ui.string/-text/#samples","text":"[androidJvm] com.zachklipp.richtext.ui.string.TextPreview","title":"Samples"},{"location":"api/com.zachklipp.richtext.ui.string/rich-text-string/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / richTextString richTextString \u00b6 [androidJvm] Content inline fun richTextString (builder: RichTextString.Builder .() -> Unit ): RichTextString More info Convenience function for creating a RichTextString using a Builder .","title":"Rich text string"},{"location":"api/com.zachklipp.richtext.ui.string/rich-text-string/#richtextstring","text":"[androidJvm] Content inline fun richTextString (builder: RichTextString.Builder .() -> Unit ): RichTextString More info Convenience function for creating a RichTextString using a Builder .","title":"richTextString"},{"location":"api/com.zachklipp.richtext.ui.string/with-format/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / withFormat withFormat \u00b6 [androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"With format"},{"location":"api/com.zachklipp.richtext.ui.string/with-format/#withformat","text":"[androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"withFormat"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / InlineContent InlineContent \u00b6 [androidJvm] class InlineContent ( initialSize : Density.() -> IntSize?, content : Density.(alternateText: String ) -> Unit ) A Composable that can be embedded inline in a RichTextString by passing to RichTextString.Builder.appendInlineContent . Parameters \u00b6 androidJvm Name Summary initialSize Optional function to calculate the initial size of the content. Not specifying this may cause flicker. Constructors \u00b6 Name Summary InlineContent [androidJvm] fun InlineContent (initialSize: Density.() -> IntSize? = null, content: Density.(alternateText: String ) -> Unit )Optional function to calculate the initial size of the content. Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/#inlinecontent","text":"[androidJvm] class InlineContent ( initialSize : Density.() -> IntSize?, content : Density.(alternateText: String ) -> Unit ) A Composable that can be embedded inline in a RichTextString by passing to RichTextString.Builder.appendInlineContent .","title":"InlineContent"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/#parameters","text":"androidJvm Name Summary initialSize Optional function to calculate the initial size of the content. Not specifying this may cause flicker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/#constructors","text":"Name Summary InlineContent [androidJvm] fun InlineContent (initialSize: Density.() -> IntSize? = null, content: Density.(alternateText: String ) -> Unit )Optional function to calculate the initial size of the content.","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/-inline-content/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / InlineContent / InlineContent InlineContent \u00b6 [androidJvm] Content fun InlineContent (initialSize: Density.() -> IntSize? = null, content: Density.(alternateText: String ) -> Unit ) More info Parameters \u00b6 androidJvm Name Summary initialSize Optional function to calculate the initial size of the content. Not specifying this may cause flicker.","title":" inline content"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/-inline-content/#inlinecontent","text":"[androidJvm] Content fun InlineContent (initialSize: Density.() -> IntSize? = null, content: Density.(alternateText: String ) -> Unit ) More info","title":"InlineContent"},{"location":"api/com.zachklipp.richtext.ui.string/-inline-content/-inline-content/#parameters","text":"androidJvm Name Summary initialSize Optional function to calculate the initial size of the content. Not specifying this may cause flicker.","title":"Parameters"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString RichTextString \u00b6 [androidJvm] @Immutable() data class RichTextString A special type of AnnotatedString that is formatted using higher-level directives that are configured using a RichTextStringStyle . Types \u00b6 Name Summary Builder [androidJvm] Content class Builder ( capacity : Int ) Format [androidJvm] Content sealed class Format Functions \u00b6 Name Summary copy [androidJvm] Content fun copy (taggedString: AnnotatedString, formatObjects: Map < String , Any >): RichTextString equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int plus [androidJvm] Content operator fun plus (other: RichTextString ): RichTextString toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary length [androidJvm] val length : Int text [androidJvm] val text : String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/#richtextstring","text":"[androidJvm] @Immutable() data class RichTextString A special type of AnnotatedString that is formatted using higher-level directives that are configured using a RichTextStringStyle .","title":"RichTextString"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/#types","text":"Name Summary Builder [androidJvm] Content class Builder ( capacity : Int ) Format [androidJvm] Content sealed class Format","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/#functions","text":"Name Summary copy [androidJvm] Content fun copy (taggedString: AnnotatedString, formatObjects: Map < String , Any >): RichTextString equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int plus [androidJvm] Content operator fun plus (other: RichTextString ): RichTextString toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/#properties","text":"Name Summary length [androidJvm] val length : Int text [androidJvm] val text : String","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / copy copy \u00b6 [androidJvm] Content fun copy (taggedString: AnnotatedString, formatObjects: Map < String , Any >): RichTextString","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/copy/#copy","text":"[androidJvm] Content fun copy (taggedString: AnnotatedString, formatObjects: Map < String , Any >): RichTextString","title":"copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/length/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / length length \u00b6 [androidJvm] Content val length : Int","title":"Length"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/length/#length","text":"[androidJvm] Content val length : Int","title":"length"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/plus/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / plus plus \u00b6 [androidJvm] Content operator fun plus (other: RichTextString ): RichTextString","title":"Plus"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/plus/#plus","text":"[androidJvm] Content operator fun plus (other: RichTextString ): RichTextString","title":"plus"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/text/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / text text \u00b6 [androidJvm] Content val text : String","title":"Text"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/text/#text","text":"[androidJvm] Content val text : String","title":"text"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder Builder \u00b6 [androidJvm] class Builder ( capacity : Int ) Functions \u00b6 Name Summary addFormat [androidJvm] Content fun addFormat (format: RichTextString.Format , start: Int , end: Int ) append [androidJvm] Content fun append (text: RichTextString ) fun append (text: String ) appendInlineContent [androidJvm] Content fun appendInlineContent (alternateText: String = REPLACEMENT_CHAR, content: InlineContent ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int pop [androidJvm] Content fun pop () fun pop (index: Int ) pushFormat [androidJvm] Content fun pushFormat (format: RichTextString.Format ): Int toRichTextString [androidJvm] Content fun toRichTextString (): RichTextString toString [androidJvm] Content open fun toString (): String withAnnotatedString [androidJvm] Content fun < T > withAnnotatedString (block: AnnotatedString.Builder.() -> T ): T More info Provides access to the underlying builder, which can be used to add arbitrary formatting, including mixed with formatting from this Builder. Extensions \u00b6 Name Summary withFormat [androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/#builder","text":"[androidJvm] class Builder ( capacity : Int )","title":"Builder"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/#functions","text":"Name Summary addFormat [androidJvm] Content fun addFormat (format: RichTextString.Format , start: Int , end: Int ) append [androidJvm] Content fun append (text: RichTextString ) fun append (text: String ) appendInlineContent [androidJvm] Content fun appendInlineContent (alternateText: String = REPLACEMENT_CHAR, content: InlineContent ) equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int pop [androidJvm] Content fun pop () fun pop (index: Int ) pushFormat [androidJvm] Content fun pushFormat (format: RichTextString.Format ): Int toRichTextString [androidJvm] Content fun toRichTextString (): RichTextString toString [androidJvm] Content open fun toString (): String withAnnotatedString [androidJvm] Content fun < T > withAnnotatedString (block: AnnotatedString.Builder.() -> T ): T More info Provides access to the underlying builder, which can be used to add arbitrary formatting, including mixed with formatting from this Builder.","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/#extensions","text":"Name Summary withFormat [androidJvm] Content inline fun RichTextString.Builder . withFormat (format: RichTextString.Format , block: RichTextString.Builder .() -> Unit )","title":"Extensions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/-builder/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / Builder Builder \u00b6 [androidJvm] Content fun Builder (capacity: Int = 16)","title":" builder"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/-builder/#builder","text":"[androidJvm] Content fun Builder (capacity: Int = 16)","title":"Builder"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/add-format/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / addFormat addFormat \u00b6 [androidJvm] Content fun addFormat (format: RichTextString.Format , start: Int , end: Int )","title":"Add format"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/add-format/#addformat","text":"[androidJvm] Content fun addFormat (format: RichTextString.Format , start: Int , end: Int )","title":"addFormat"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/append-inline-content/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / appendInlineContent appendInlineContent \u00b6 [androidJvm] Content fun appendInlineContent (alternateText: String = REPLACEMENT_CHAR, content: InlineContent )","title":"Append inline content"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/append-inline-content/#appendinlinecontent","text":"[androidJvm] Content fun appendInlineContent (alternateText: String = REPLACEMENT_CHAR, content: InlineContent )","title":"appendInlineContent"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/append/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / append append \u00b6 [androidJvm] Content fun append (text: String ) fun append (text: RichTextString )","title":"Append"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/append/#append","text":"[androidJvm] Content fun append (text: String ) fun append (text: RichTextString )","title":"append"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/pop/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / pop pop \u00b6 [androidJvm] Content fun pop () fun pop (index: Int )","title":"Pop"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/pop/#pop","text":"[androidJvm] Content fun pop () fun pop (index: Int )","title":"pop"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/push-format/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / pushFormat pushFormat \u00b6 [androidJvm] Content fun pushFormat (format: RichTextString.Format ): Int","title":"Push format"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/push-format/#pushformat","text":"[androidJvm] Content fun pushFormat (format: RichTextString.Format ): Int","title":"pushFormat"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/to-rich-text-string/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / toRichTextString toRichTextString \u00b6 [androidJvm] Content fun toRichTextString (): RichTextString","title":"To rich text string"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/to-rich-text-string/#torichtextstring","text":"[androidJvm] Content fun toRichTextString (): RichTextString","title":"toRichTextString"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/with-annotated-string/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Builder / withAnnotatedString withAnnotatedString \u00b6 [androidJvm] Content fun < T > withAnnotatedString (block: AnnotatedString.Builder.() -> T ): T More info Provides access to the underlying builder, which can be used to add arbitrary formatting, including mixed with formatting from this Builder.","title":"With annotated string"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-builder/with-annotated-string/#withannotatedstring","text":"[androidJvm] Content fun < T > withAnnotatedString (block: AnnotatedString.Builder.() -> T ): T More info Provides access to the underlying builder, which can be used to add arbitrary formatting, including mixed with formatting from this Builder.","title":"withAnnotatedString"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format Format \u00b6 [androidJvm] sealed class Format Types \u00b6 Name Summary Bold [androidJvm] Content object Bold : RichTextString.Format Code [androidJvm] Content object Code : RichTextString.Format Italic [androidJvm] Content object Italic : RichTextString.Format Link [androidJvm] Content data class Link ( onClick : () -> Unit ) : RichTextString.Format Strikethrough [androidJvm] Content object Strikethrough : RichTextString.Format Subscript [androidJvm] Content object Subscript : RichTextString.Format Superscript [androidJvm] Content object Superscript : RichTextString.Format Underline [androidJvm] Content object Underline : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Inheritors \u00b6 Name RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/#format","text":"[androidJvm] sealed class Format","title":"Format"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/#types","text":"Name Summary Bold [androidJvm] Content object Bold : RichTextString.Format Code [androidJvm] Content object Code : RichTextString.Format Italic [androidJvm] Content object Italic : RichTextString.Format Link [androidJvm] Content data class Link ( onClick : () -> Unit ) : RichTextString.Format Strikethrough [androidJvm] Content object Strikethrough : RichTextString.Format Subscript [androidJvm] Content object Subscript : RichTextString.Format Superscript [androidJvm] Content object Superscript : RichTextString.Format Underline [androidJvm] Content object Underline : RichTextString.Format","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/#inheritors","text":"Name RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format RichTextString.Format","title":"Inheritors"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-bold/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Bold Bold \u00b6 [androidJvm] object Bold : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-bold/#bold","text":"[androidJvm] object Bold : RichTextString.Format","title":"Bold"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-bold/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-code/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Code Code \u00b6 [androidJvm] object Code : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-code/#code","text":"[androidJvm] object Code : RichTextString.Format","title":"Code"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-code/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-italic/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Italic Italic \u00b6 [androidJvm] object Italic : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-italic/#italic","text":"[androidJvm] object Italic : RichTextString.Format","title":"Italic"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-italic/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Link Link \u00b6 [androidJvm] data class Link ( onClick : () -> Unit ) : RichTextString.Format Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): () -> Unit copy [androidJvm] Content fun copy (onClick: () -> Unit ): RichTextString.Format.Link equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary onClick [androidJvm] val onClick : () -> Unit","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/#link","text":"[androidJvm] data class Link ( onClick : () -> Unit ) : RichTextString.Format","title":"Link"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): () -> Unit copy [androidJvm] Content fun copy (onClick: () -> Unit ): RichTextString.Format.Link equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/#properties","text":"Name Summary onClick [androidJvm] val onClick : () -> Unit","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/-link/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Link / Link Link \u00b6 [androidJvm] Content fun Link (onClick: () -> Unit )","title":" link"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/-link/#link","text":"[androidJvm] Content fun Link (onClick: () -> Unit )","title":"Link"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Link / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): () -> Unit","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/component1/#component1","text":"[androidJvm] Content operator fun component1 (): () -> Unit","title":"component1"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Link / copy copy \u00b6 [androidJvm] Content fun copy (onClick: () -> Unit ): RichTextString.Format.Link","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/copy/#copy","text":"[androidJvm] Content fun copy (onClick: () -> Unit ): RichTextString.Format.Link","title":"copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/on-click/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Link / onClick onClick \u00b6 [androidJvm] Content val onClick : () -> Unit","title":"On click"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-link/on-click/#onclick","text":"[androidJvm] Content val onClick : () -> Unit","title":"onClick"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-strikethrough/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Strikethrough Strikethrough \u00b6 [androidJvm] object Strikethrough : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-strikethrough/#strikethrough","text":"[androidJvm] object Strikethrough : RichTextString.Format","title":"Strikethrough"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-strikethrough/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-subscript/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Subscript Subscript \u00b6 [androidJvm] object Subscript : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-subscript/#subscript","text":"[androidJvm] object Subscript : RichTextString.Format","title":"Subscript"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-subscript/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-superscript/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Superscript Superscript \u00b6 [androidJvm] object Superscript : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-superscript/#superscript","text":"[androidJvm] object Superscript : RichTextString.Format","title":"Superscript"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-superscript/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-underline/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextString / Format / Underline Underline \u00b6 [androidJvm] object Underline : RichTextString.Format Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-underline/#underline","text":"[androidJvm] object Underline : RichTextString.Format","title":"Underline"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string/-format/-underline/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle RichTextStringStyle \u00b6 [androidJvm] @Immutable() data class RichTextStringStyle ( boldStyle : SpanStyle?, italicStyle : SpanStyle?, underlineStyle : SpanStyle?, strikethroughStyle : SpanStyle?, subscriptStyle : SpanStyle?, superscriptStyle : SpanStyle?, codeStyle : SpanStyle?, linkStyle : SpanStyle?) Defines the SpanStyles that are used for various RichTextString formatting directives. Constructors \u00b6 Name Summary RichTextStringStyle [androidJvm] fun RichTextStringStyle (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null) Types \u00b6 Name Summary Companion [androidJvm] Content object Companion Functions \u00b6 Name Summary component1 [androidJvm] Content operator fun component1 (): SpanStyle? component2 [androidJvm] Content operator fun component2 (): SpanStyle? component3 [androidJvm] Content operator fun component3 (): SpanStyle? component4 [androidJvm] Content operator fun component4 (): SpanStyle? component5 [androidJvm] Content operator fun component5 (): SpanStyle? component6 [androidJvm] Content operator fun component6 (): SpanStyle? component7 [androidJvm] Content operator fun component7 (): SpanStyle? component8 [androidJvm] Content operator fun component8 (): SpanStyle? copy [androidJvm] Content fun copy (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null): RichTextStringStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String Properties \u00b6 Name Summary boldStyle [androidJvm] val boldStyle : SpanStyle? = null codeStyle [androidJvm] val codeStyle : SpanStyle? = null italicStyle [androidJvm] val italicStyle : SpanStyle? = null linkStyle [androidJvm] val linkStyle : SpanStyle? = null strikethroughStyle [androidJvm] val strikethroughStyle : SpanStyle? = null subscriptStyle [androidJvm] val subscriptStyle : SpanStyle? = null superscriptStyle [androidJvm] val superscriptStyle : SpanStyle? = null underlineStyle [androidJvm] val underlineStyle : SpanStyle? = null","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/#richtextstringstyle","text":"[androidJvm] @Immutable() data class RichTextStringStyle ( boldStyle : SpanStyle?, italicStyle : SpanStyle?, underlineStyle : SpanStyle?, strikethroughStyle : SpanStyle?, subscriptStyle : SpanStyle?, superscriptStyle : SpanStyle?, codeStyle : SpanStyle?, linkStyle : SpanStyle?) Defines the SpanStyles that are used for various RichTextString formatting directives.","title":"RichTextStringStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/#constructors","text":"Name Summary RichTextStringStyle [androidJvm] fun RichTextStringStyle (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null)","title":"Constructors"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/#types","text":"Name Summary Companion [androidJvm] Content object Companion","title":"Types"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/#functions","text":"Name Summary component1 [androidJvm] Content operator fun component1 (): SpanStyle? component2 [androidJvm] Content operator fun component2 (): SpanStyle? component3 [androidJvm] Content operator fun component3 (): SpanStyle? component4 [androidJvm] Content operator fun component4 (): SpanStyle? component5 [androidJvm] Content operator fun component5 (): SpanStyle? component6 [androidJvm] Content operator fun component6 (): SpanStyle? component7 [androidJvm] Content operator fun component7 (): SpanStyle? component8 [androidJvm] Content operator fun component8 (): SpanStyle? copy [androidJvm] Content fun copy (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null): RichTextStringStyle equals [androidJvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open override fun hashCode (): Int toString [androidJvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/#properties","text":"Name Summary boldStyle [androidJvm] val boldStyle : SpanStyle? = null codeStyle [androidJvm] val codeStyle : SpanStyle? = null italicStyle [androidJvm] val italicStyle : SpanStyle? = null linkStyle [androidJvm] val linkStyle : SpanStyle? = null strikethroughStyle [androidJvm] val strikethroughStyle : SpanStyle? = null subscriptStyle [androidJvm] val subscriptStyle : SpanStyle? = null superscriptStyle [androidJvm] val superscriptStyle : SpanStyle? = null underlineStyle [androidJvm] val underlineStyle : SpanStyle? = null","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-rich-text-string-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / RichTextStringStyle RichTextStringStyle \u00b6 [androidJvm] Content fun RichTextStringStyle (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null)","title":" rich text string style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-rich-text-string-style/#richtextstringstyle","text":"[androidJvm] Content fun RichTextStringStyle (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null)","title":"RichTextStringStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/bold-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / boldStyle boldStyle \u00b6 [androidJvm] Content val boldStyle : SpanStyle? = null","title":"Bold style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/bold-style/#boldstyle","text":"[androidJvm] Content val boldStyle : SpanStyle? = null","title":"boldStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/code-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / codeStyle codeStyle \u00b6 [androidJvm] Content val codeStyle : SpanStyle? = null","title":"Code style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/code-style/#codestyle","text":"[androidJvm] Content val codeStyle : SpanStyle? = null","title":"codeStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component1/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component1 component1 \u00b6 [androidJvm] Content operator fun component1 (): SpanStyle?","title":"Component1"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component1/#component1","text":"[androidJvm] Content operator fun component1 (): SpanStyle?","title":"component1"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component2/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component2 component2 \u00b6 [androidJvm] Content operator fun component2 (): SpanStyle?","title":"Component2"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component2/#component2","text":"[androidJvm] Content operator fun component2 (): SpanStyle?","title":"component2"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component3/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component3 component3 \u00b6 [androidJvm] Content operator fun component3 (): SpanStyle?","title":"Component3"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component3/#component3","text":"[androidJvm] Content operator fun component3 (): SpanStyle?","title":"component3"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component4/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component4 component4 \u00b6 [androidJvm] Content operator fun component4 (): SpanStyle?","title":"Component4"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component4/#component4","text":"[androidJvm] Content operator fun component4 (): SpanStyle?","title":"component4"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component5/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component5 component5 \u00b6 [androidJvm] Content operator fun component5 (): SpanStyle?","title":"Component5"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component5/#component5","text":"[androidJvm] Content operator fun component5 (): SpanStyle?","title":"component5"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component6/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component6 component6 \u00b6 [androidJvm] Content operator fun component6 (): SpanStyle?","title":"Component6"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component6/#component6","text":"[androidJvm] Content operator fun component6 (): SpanStyle?","title":"component6"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component7/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component7 component7 \u00b6 [androidJvm] Content operator fun component7 (): SpanStyle?","title":"Component7"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component7/#component7","text":"[androidJvm] Content operator fun component7 (): SpanStyle?","title":"component7"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component8/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / component8 component8 \u00b6 [androidJvm] Content operator fun component8 (): SpanStyle?","title":"Component8"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/component8/#component8","text":"[androidJvm] Content operator fun component8 (): SpanStyle?","title":"component8"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/copy/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / copy copy \u00b6 [androidJvm] Content fun copy (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null): RichTextStringStyle","title":"Copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/copy/#copy","text":"[androidJvm] Content fun copy (boldStyle: SpanStyle? = null, italicStyle: SpanStyle? = null, underlineStyle: SpanStyle? = null, strikethroughStyle: SpanStyle? = null, subscriptStyle: SpanStyle? = null, superscriptStyle: SpanStyle? = null, codeStyle: SpanStyle? = null, linkStyle: SpanStyle? = null): RichTextStringStyle","title":"copy"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/italic-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / italicStyle italicStyle \u00b6 [androidJvm] Content val italicStyle : SpanStyle? = null","title":"Italic style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/italic-style/#italicstyle","text":"[androidJvm] Content val italicStyle : SpanStyle? = null","title":"italicStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/link-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / linkStyle linkStyle \u00b6 [androidJvm] Content val linkStyle : SpanStyle? = null","title":"Link style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/link-style/#linkstyle","text":"[androidJvm] Content val linkStyle : SpanStyle? = null","title":"linkStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/strikethrough-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / strikethroughStyle strikethroughStyle \u00b6 [androidJvm] Content val strikethroughStyle : SpanStyle? = null","title":"Strikethrough style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/strikethrough-style/#strikethroughstyle","text":"[androidJvm] Content val strikethroughStyle : SpanStyle? = null","title":"strikethroughStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/subscript-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / subscriptStyle subscriptStyle \u00b6 [androidJvm] Content val subscriptStyle : SpanStyle? = null","title":"Subscript style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/subscript-style/#subscriptstyle","text":"[androidJvm] Content val subscriptStyle : SpanStyle? = null","title":"subscriptStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/superscript-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / superscriptStyle superscriptStyle \u00b6 [androidJvm] Content val superscriptStyle : SpanStyle? = null","title":"Superscript style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/superscript-style/#superscriptstyle","text":"[androidJvm] Content val superscriptStyle : SpanStyle? = null","title":"superscriptStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/underline-style/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / underlineStyle underlineStyle \u00b6 [androidJvm] Content val underlineStyle : SpanStyle? = null","title":"Underline style"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/underline-style/#underlinestyle","text":"[androidJvm] Content val underlineStyle : SpanStyle? = null","title":"underlineStyle"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / Companion Companion \u00b6 [androidJvm] object Companion Functions \u00b6 Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String Properties \u00b6 Name Summary Default [androidJvm] val Default : RichTextStringStyle","title":"Index"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/#companion","text":"[androidJvm] object Companion","title":"Companion"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/#functions","text":"Name Summary equals [androidJvm] Content open operator fun equals (other: Any ?): Boolean hashCode [androidJvm] Content open fun hashCode (): Int toString [androidJvm] Content open fun toString (): String","title":"Functions"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/#properties","text":"Name Summary Default [androidJvm] val Default : RichTextStringStyle","title":"Properties"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/-default/","text":"// compose-richtext / com.zachklipp.richtext.ui.string / RichTextStringStyle / Companion / Default Default \u00b6 [androidJvm] Content val Default : RichTextStringStyle","title":" default"},{"location":"api/com.zachklipp.richtext.ui.string/-rich-text-string-style/-companion/-default/#default","text":"[androidJvm] Content val Default : RichTextStringStyle","title":"Default"}]}